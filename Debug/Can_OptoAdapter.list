
Can_OptoAdapter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002208  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080022c4  080022c4  000032c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002304  08002304  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002304  08002304  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002304  08002304  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002304  08002304  00003304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002308  08002308  00003308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800230c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  08002318  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08002318  00004090  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000717a  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016a3  00000000  00000000  0000b1ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e0  00000000  00000000  0000c858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005d6  00000000  00000000  0000d038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a555  00000000  00000000  0000d60e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008863  00000000  00000000  00027b63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000abdd4  00000000  00000000  000303c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dc19a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ac0  00000000  00000000  000dc1e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000ddca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080022ac 	.word	0x080022ac

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080022ac 	.word	0x080022ac

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 fa48 	bl	80006b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 f806 	bl	8000234 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 f894 	bl	8000354 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800022c:	f000 f84a 	bl	80002c4 <MX_FDCAN1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000230:	46c0      	nop			@ (mov r8, r8)
 8000232:	e7fd      	b.n	8000230 <main+0x14>

08000234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000234:	b590      	push	{r4, r7, lr}
 8000236:	b095      	sub	sp, #84	@ 0x54
 8000238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023a:	2414      	movs	r4, #20
 800023c:	193b      	adds	r3, r7, r4
 800023e:	0018      	movs	r0, r3
 8000240:	233c      	movs	r3, #60	@ 0x3c
 8000242:	001a      	movs	r2, r3
 8000244:	2100      	movs	r1, #0
 8000246:	f002 f805 	bl	8002254 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024a:	1d3b      	adds	r3, r7, #4
 800024c:	0018      	movs	r0, r3
 800024e:	2310      	movs	r3, #16
 8000250:	001a      	movs	r2, r3
 8000252:	2100      	movs	r1, #0
 8000254:	f001 fffe 	bl	8002254 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000258:	2380      	movs	r3, #128	@ 0x80
 800025a:	009b      	lsls	r3, r3, #2
 800025c:	0018      	movs	r0, r3
 800025e:	f001 f893 	bl	8001388 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000262:	193b      	adds	r3, r7, r4
 8000264:	2202      	movs	r2, #2
 8000266:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000268:	193b      	adds	r3, r7, r4
 800026a:	2280      	movs	r2, #128	@ 0x80
 800026c:	0052      	lsls	r2, r2, #1
 800026e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000270:	193b      	adds	r3, r7, r4
 8000272:	2200      	movs	r2, #0
 8000274:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000276:	193b      	adds	r3, r7, r4
 8000278:	2240      	movs	r2, #64	@ 0x40
 800027a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800027c:	193b      	adds	r3, r7, r4
 800027e:	2200      	movs	r2, #0
 8000280:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000282:	193b      	adds	r3, r7, r4
 8000284:	0018      	movs	r0, r3
 8000286:	f001 f8bf 	bl	8001408 <HAL_RCC_OscConfig>
 800028a:	1e03      	subs	r3, r0, #0
 800028c:	d001      	beq.n	8000292 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800028e:	f000 f90f 	bl	80004b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	2207      	movs	r2, #7
 8000296:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	2200      	movs	r2, #0
 800029c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	2200      	movs	r2, #0
 80002a2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	2200      	movs	r2, #0
 80002a8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	2100      	movs	r1, #0
 80002ae:	0018      	movs	r0, r3
 80002b0:	f001 fc0a 	bl	8001ac8 <HAL_RCC_ClockConfig>
 80002b4:	1e03      	subs	r3, r0, #0
 80002b6:	d001      	beq.n	80002bc <SystemClock_Config+0x88>
  {
    Error_Handler();
 80002b8:	f000 f8fa 	bl	80004b0 <Error_Handler>
  }
}
 80002bc:	46c0      	nop			@ (mov r8, r8)
 80002be:	46bd      	mov	sp, r7
 80002c0:	b015      	add	sp, #84	@ 0x54
 80002c2:	bd90      	pop	{r4, r7, pc}

080002c4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80002c8:	4b20      	ldr	r3, [pc, #128]	@ (800034c <MX_FDCAN1_Init+0x88>)
 80002ca:	4a21      	ldr	r2, [pc, #132]	@ (8000350 <MX_FDCAN1_Init+0x8c>)
 80002cc:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80002ce:	4b1f      	ldr	r3, [pc, #124]	@ (800034c <MX_FDCAN1_Init+0x88>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80002d4:	4b1d      	ldr	r3, [pc, #116]	@ (800034c <MX_FDCAN1_Init+0x88>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80002da:	4b1c      	ldr	r3, [pc, #112]	@ (800034c <MX_FDCAN1_Init+0x88>)
 80002dc:	2200      	movs	r2, #0
 80002de:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80002e0:	4b1a      	ldr	r3, [pc, #104]	@ (800034c <MX_FDCAN1_Init+0x88>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80002e6:	4b19      	ldr	r3, [pc, #100]	@ (800034c <MX_FDCAN1_Init+0x88>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80002ec:	4b17      	ldr	r3, [pc, #92]	@ (800034c <MX_FDCAN1_Init+0x88>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 80002f2:	4b16      	ldr	r3, [pc, #88]	@ (800034c <MX_FDCAN1_Init+0x88>)
 80002f4:	2210      	movs	r2, #16
 80002f6:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80002f8:	4b14      	ldr	r3, [pc, #80]	@ (800034c <MX_FDCAN1_Init+0x88>)
 80002fa:	2201      	movs	r2, #1
 80002fc:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 1;
 80002fe:	4b13      	ldr	r3, [pc, #76]	@ (800034c <MX_FDCAN1_Init+0x88>)
 8000300:	2201      	movs	r2, #1
 8000302:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 1;
 8000304:	4b11      	ldr	r3, [pc, #68]	@ (800034c <MX_FDCAN1_Init+0x88>)
 8000306:	2201      	movs	r2, #1
 8000308:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800030a:	4b10      	ldr	r3, [pc, #64]	@ (800034c <MX_FDCAN1_Init+0x88>)
 800030c:	2201      	movs	r2, #1
 800030e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000310:	4b0e      	ldr	r3, [pc, #56]	@ (800034c <MX_FDCAN1_Init+0x88>)
 8000312:	2201      	movs	r2, #1
 8000314:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000316:	4b0d      	ldr	r3, [pc, #52]	@ (800034c <MX_FDCAN1_Init+0x88>)
 8000318:	2201      	movs	r2, #1
 800031a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800031c:	4b0b      	ldr	r3, [pc, #44]	@ (800034c <MX_FDCAN1_Init+0x88>)
 800031e:	2201      	movs	r2, #1
 8000320:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000322:	4b0a      	ldr	r3, [pc, #40]	@ (800034c <MX_FDCAN1_Init+0x88>)
 8000324:	2200      	movs	r2, #0
 8000326:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000328:	4b08      	ldr	r3, [pc, #32]	@ (800034c <MX_FDCAN1_Init+0x88>)
 800032a:	2200      	movs	r2, #0
 800032c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800032e:	4b07      	ldr	r3, [pc, #28]	@ (800034c <MX_FDCAN1_Init+0x88>)
 8000330:	2200      	movs	r2, #0
 8000332:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000334:	4b05      	ldr	r3, [pc, #20]	@ (800034c <MX_FDCAN1_Init+0x88>)
 8000336:	0018      	movs	r0, r3
 8000338:	f000 fb36 	bl	80009a8 <HAL_FDCAN_Init>
 800033c:	1e03      	subs	r3, r0, #0
 800033e:	d001      	beq.n	8000344 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000340:	f000 f8b6 	bl	80004b0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000344:	46c0      	nop			@ (mov r8, r8)
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	46c0      	nop			@ (mov r8, r8)
 800034c:	20000028 	.word	0x20000028
 8000350:	40006400 	.word	0x40006400

08000354 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000354:	b590      	push	{r4, r7, lr}
 8000356:	b089      	sub	sp, #36	@ 0x24
 8000358:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800035a:	240c      	movs	r4, #12
 800035c:	193b      	adds	r3, r7, r4
 800035e:	0018      	movs	r0, r3
 8000360:	2314      	movs	r3, #20
 8000362:	001a      	movs	r2, r3
 8000364:	2100      	movs	r1, #0
 8000366:	f001 ff75 	bl	8002254 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800036a:	4b4e      	ldr	r3, [pc, #312]	@ (80004a4 <MX_GPIO_Init+0x150>)
 800036c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800036e:	4b4d      	ldr	r3, [pc, #308]	@ (80004a4 <MX_GPIO_Init+0x150>)
 8000370:	2102      	movs	r1, #2
 8000372:	430a      	orrs	r2, r1
 8000374:	635a      	str	r2, [r3, #52]	@ 0x34
 8000376:	4b4b      	ldr	r3, [pc, #300]	@ (80004a4 <MX_GPIO_Init+0x150>)
 8000378:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800037a:	2202      	movs	r2, #2
 800037c:	4013      	ands	r3, r2
 800037e:	60bb      	str	r3, [r7, #8]
 8000380:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000382:	4b48      	ldr	r3, [pc, #288]	@ (80004a4 <MX_GPIO_Init+0x150>)
 8000384:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000386:	4b47      	ldr	r3, [pc, #284]	@ (80004a4 <MX_GPIO_Init+0x150>)
 8000388:	2104      	movs	r1, #4
 800038a:	430a      	orrs	r2, r1
 800038c:	635a      	str	r2, [r3, #52]	@ 0x34
 800038e:	4b45      	ldr	r3, [pc, #276]	@ (80004a4 <MX_GPIO_Init+0x150>)
 8000390:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000392:	2204      	movs	r2, #4
 8000394:	4013      	ands	r3, r2
 8000396:	607b      	str	r3, [r7, #4]
 8000398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800039a:	4b42      	ldr	r3, [pc, #264]	@ (80004a4 <MX_GPIO_Init+0x150>)
 800039c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800039e:	4b41      	ldr	r3, [pc, #260]	@ (80004a4 <MX_GPIO_Init+0x150>)
 80003a0:	2101      	movs	r1, #1
 80003a2:	430a      	orrs	r2, r1
 80003a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80003a6:	4b3f      	ldr	r3, [pc, #252]	@ (80004a4 <MX_GPIO_Init+0x150>)
 80003a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80003aa:	2201      	movs	r2, #1
 80003ac:	4013      	ands	r3, r2
 80003ae:	603b      	str	r3, [r7, #0]
 80003b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9|GPIO_PIN_8, GPIO_PIN_RESET);
 80003b2:	23c0      	movs	r3, #192	@ 0xc0
 80003b4:	009b      	lsls	r3, r3, #2
 80003b6:	483c      	ldr	r0, [pc, #240]	@ (80004a8 <MX_GPIO_Init+0x154>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	0019      	movs	r1, r3
 80003bc:	f000 ffc6 	bl	800134c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80003c0:	2380      	movs	r3, #128	@ 0x80
 80003c2:	021b      	lsls	r3, r3, #8
 80003c4:	4839      	ldr	r0, [pc, #228]	@ (80004ac <MX_GPIO_Init+0x158>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	0019      	movs	r1, r3
 80003ca:	f000 ffbf 	bl	800134c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB9 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 80003ce:	193b      	adds	r3, r7, r4
 80003d0:	22c0      	movs	r2, #192	@ 0xc0
 80003d2:	0092      	lsls	r2, r2, #2
 80003d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d6:	193b      	adds	r3, r7, r4
 80003d8:	2201      	movs	r2, #1
 80003da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003dc:	193b      	adds	r3, r7, r4
 80003de:	2200      	movs	r2, #0
 80003e0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e2:	193b      	adds	r3, r7, r4
 80003e4:	2200      	movs	r2, #0
 80003e6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003e8:	193b      	adds	r3, r7, r4
 80003ea:	4a2f      	ldr	r2, [pc, #188]	@ (80004a8 <MX_GPIO_Init+0x154>)
 80003ec:	0019      	movs	r1, r3
 80003ee:	0010      	movs	r0, r2
 80003f0:	f000 fe40 	bl	8001074 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80003f4:	0021      	movs	r1, r4
 80003f6:	187b      	adds	r3, r7, r1
 80003f8:	2280      	movs	r2, #128	@ 0x80
 80003fa:	01d2      	lsls	r2, r2, #7
 80003fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003fe:	000c      	movs	r4, r1
 8000400:	193b      	adds	r3, r7, r4
 8000402:	2200      	movs	r2, #0
 8000404:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000406:	193b      	adds	r3, r7, r4
 8000408:	2200      	movs	r2, #0
 800040a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800040c:	193b      	adds	r3, r7, r4
 800040e:	4a27      	ldr	r2, [pc, #156]	@ (80004ac <MX_GPIO_Init+0x158>)
 8000410:	0019      	movs	r1, r3
 8000412:	0010      	movs	r0, r2
 8000414:	f000 fe2e 	bl	8001074 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000418:	0021      	movs	r1, r4
 800041a:	187b      	adds	r3, r7, r1
 800041c:	2280      	movs	r2, #128	@ 0x80
 800041e:	0212      	lsls	r2, r2, #8
 8000420:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000422:	000c      	movs	r4, r1
 8000424:	193b      	adds	r3, r7, r4
 8000426:	2201      	movs	r2, #1
 8000428:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042a:	193b      	adds	r3, r7, r4
 800042c:	2200      	movs	r2, #0
 800042e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000430:	193b      	adds	r3, r7, r4
 8000432:	2200      	movs	r2, #0
 8000434:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000436:	193b      	adds	r3, r7, r4
 8000438:	4a1c      	ldr	r2, [pc, #112]	@ (80004ac <MX_GPIO_Init+0x158>)
 800043a:	0019      	movs	r1, r3
 800043c:	0010      	movs	r0, r2
 800043e:	f000 fe19 	bl	8001074 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000442:	193b      	adds	r3, r7, r4
 8000444:	2203      	movs	r2, #3
 8000446:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000448:	193b      	adds	r3, r7, r4
 800044a:	2202      	movs	r2, #2
 800044c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044e:	193b      	adds	r3, r7, r4
 8000450:	2200      	movs	r2, #0
 8000452:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000454:	193b      	adds	r3, r7, r4
 8000456:	2200      	movs	r2, #0
 8000458:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF8_USART5;
 800045a:	193b      	adds	r3, r7, r4
 800045c:	2208      	movs	r2, #8
 800045e:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000460:	193b      	adds	r3, r7, r4
 8000462:	4a11      	ldr	r2, [pc, #68]	@ (80004a8 <MX_GPIO_Init+0x154>)
 8000464:	0019      	movs	r1, r3
 8000466:	0010      	movs	r0, r2
 8000468:	f000 fe04 	bl	8001074 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800046c:	0021      	movs	r1, r4
 800046e:	187b      	adds	r3, r7, r1
 8000470:	22c0      	movs	r2, #192	@ 0xc0
 8000472:	00d2      	lsls	r2, r2, #3
 8000474:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000476:	187b      	adds	r3, r7, r1
 8000478:	2212      	movs	r2, #18
 800047a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047c:	187b      	adds	r3, r7, r1
 800047e:	2200      	movs	r2, #0
 8000480:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000482:	187b      	adds	r3, r7, r1
 8000484:	2200      	movs	r2, #0
 8000486:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000488:	187b      	adds	r3, r7, r1
 800048a:	2206      	movs	r2, #6
 800048c:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800048e:	187a      	adds	r2, r7, r1
 8000490:	23a0      	movs	r3, #160	@ 0xa0
 8000492:	05db      	lsls	r3, r3, #23
 8000494:	0011      	movs	r1, r2
 8000496:	0018      	movs	r0, r3
 8000498:	f000 fdec 	bl	8001074 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800049c:	46c0      	nop			@ (mov r8, r8)
 800049e:	46bd      	mov	sp, r7
 80004a0:	b009      	add	sp, #36	@ 0x24
 80004a2:	bd90      	pop	{r4, r7, pc}
 80004a4:	40021000 	.word	0x40021000
 80004a8:	50000400 	.word	0x50000400
 80004ac:	50000800 	.word	0x50000800

080004b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004b4:	b672      	cpsid	i
}
 80004b6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004b8:	46c0      	nop			@ (mov r8, r8)
 80004ba:	e7fd      	b.n	80004b8 <Error_Handler+0x8>

080004bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004c2:	4b11      	ldr	r3, [pc, #68]	@ (8000508 <HAL_MspInit+0x4c>)
 80004c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80004c6:	4b10      	ldr	r3, [pc, #64]	@ (8000508 <HAL_MspInit+0x4c>)
 80004c8:	2101      	movs	r1, #1
 80004ca:	430a      	orrs	r2, r1
 80004cc:	641a      	str	r2, [r3, #64]	@ 0x40
 80004ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000508 <HAL_MspInit+0x4c>)
 80004d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004d2:	2201      	movs	r2, #1
 80004d4:	4013      	ands	r3, r2
 80004d6:	607b      	str	r3, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004da:	4b0b      	ldr	r3, [pc, #44]	@ (8000508 <HAL_MspInit+0x4c>)
 80004dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80004de:	4b0a      	ldr	r3, [pc, #40]	@ (8000508 <HAL_MspInit+0x4c>)
 80004e0:	2180      	movs	r1, #128	@ 0x80
 80004e2:	0549      	lsls	r1, r1, #21
 80004e4:	430a      	orrs	r2, r1
 80004e6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80004e8:	4b07      	ldr	r3, [pc, #28]	@ (8000508 <HAL_MspInit+0x4c>)
 80004ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80004ec:	2380      	movs	r3, #128	@ 0x80
 80004ee:	055b      	lsls	r3, r3, #21
 80004f0:	4013      	ands	r3, r2
 80004f2:	603b      	str	r3, [r7, #0]
 80004f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 80004f6:	2380      	movs	r3, #128	@ 0x80
 80004f8:	009b      	lsls	r3, r3, #2
 80004fa:	0018      	movs	r0, r3
 80004fc:	f000 f960 	bl	80007c0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000500:	46c0      	nop			@ (mov r8, r8)
 8000502:	46bd      	mov	sp, r7
 8000504:	b002      	add	sp, #8
 8000506:	bd80      	pop	{r7, pc}
 8000508:	40021000 	.word	0x40021000

0800050c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800050c:	b590      	push	{r4, r7, lr}
 800050e:	b09d      	sub	sp, #116	@ 0x74
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000514:	235c      	movs	r3, #92	@ 0x5c
 8000516:	18fb      	adds	r3, r7, r3
 8000518:	0018      	movs	r0, r3
 800051a:	2314      	movs	r3, #20
 800051c:	001a      	movs	r2, r3
 800051e:	2100      	movs	r1, #0
 8000520:	f001 fe98 	bl	8002254 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000524:	2410      	movs	r4, #16
 8000526:	193b      	adds	r3, r7, r4
 8000528:	0018      	movs	r0, r3
 800052a:	234c      	movs	r3, #76	@ 0x4c
 800052c:	001a      	movs	r2, r3
 800052e:	2100      	movs	r1, #0
 8000530:	f001 fe90 	bl	8002254 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a2b      	ldr	r2, [pc, #172]	@ (80005e8 <HAL_FDCAN_MspInit+0xdc>)
 800053a:	4293      	cmp	r3, r2
 800053c:	d150      	bne.n	80005e0 <HAL_FDCAN_MspInit+0xd4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800053e:	193b      	adds	r3, r7, r4
 8000540:	2280      	movs	r2, #128	@ 0x80
 8000542:	0492      	lsls	r2, r2, #18
 8000544:	601a      	str	r2, [r3, #0]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000546:	193b      	adds	r3, r7, r4
 8000548:	2200      	movs	r2, #0
 800054a:	649a      	str	r2, [r3, #72]	@ 0x48

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800054c:	193b      	adds	r3, r7, r4
 800054e:	0018      	movs	r0, r3
 8000550:	f001 fc44 	bl	8001ddc <HAL_RCCEx_PeriphCLKConfig>
 8000554:	1e03      	subs	r3, r0, #0
 8000556:	d001      	beq.n	800055c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000558:	f7ff ffaa 	bl	80004b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800055c:	4b23      	ldr	r3, [pc, #140]	@ (80005ec <HAL_FDCAN_MspInit+0xe0>)
 800055e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000560:	4b22      	ldr	r3, [pc, #136]	@ (80005ec <HAL_FDCAN_MspInit+0xe0>)
 8000562:	2180      	movs	r1, #128	@ 0x80
 8000564:	0149      	lsls	r1, r1, #5
 8000566:	430a      	orrs	r2, r1
 8000568:	63da      	str	r2, [r3, #60]	@ 0x3c
 800056a:	4b20      	ldr	r3, [pc, #128]	@ (80005ec <HAL_FDCAN_MspInit+0xe0>)
 800056c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800056e:	2380      	movs	r3, #128	@ 0x80
 8000570:	015b      	lsls	r3, r3, #5
 8000572:	4013      	ands	r3, r2
 8000574:	60fb      	str	r3, [r7, #12]
 8000576:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000578:	4b1c      	ldr	r3, [pc, #112]	@ (80005ec <HAL_FDCAN_MspInit+0xe0>)
 800057a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800057c:	4b1b      	ldr	r3, [pc, #108]	@ (80005ec <HAL_FDCAN_MspInit+0xe0>)
 800057e:	2101      	movs	r1, #1
 8000580:	430a      	orrs	r2, r1
 8000582:	635a      	str	r2, [r3, #52]	@ 0x34
 8000584:	4b19      	ldr	r3, [pc, #100]	@ (80005ec <HAL_FDCAN_MspInit+0xe0>)
 8000586:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000588:	2201      	movs	r2, #1
 800058a:	4013      	ands	r3, r2
 800058c:	60bb      	str	r3, [r7, #8]
 800058e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11 [PA9]     ------> FDCAN1_RX
    PA12 [PA10]     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000590:	215c      	movs	r1, #92	@ 0x5c
 8000592:	187b      	adds	r3, r7, r1
 8000594:	22c0      	movs	r2, #192	@ 0xc0
 8000596:	0152      	lsls	r2, r2, #5
 8000598:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800059a:	187b      	adds	r3, r7, r1
 800059c:	2202      	movs	r2, #2
 800059e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a0:	187b      	adds	r3, r7, r1
 80005a2:	2200      	movs	r2, #0
 80005a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a6:	187b      	adds	r3, r7, r1
 80005a8:	2200      	movs	r2, #0
 80005aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN1;
 80005ac:	187b      	adds	r3, r7, r1
 80005ae:	2203      	movs	r2, #3
 80005b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b2:	187a      	adds	r2, r7, r1
 80005b4:	23a0      	movs	r3, #160	@ 0xa0
 80005b6:	05db      	lsls	r3, r3, #23
 80005b8:	0011      	movs	r1, r2
 80005ba:	0018      	movs	r0, r3
 80005bc:	f000 fd5a 	bl	8001074 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_FDCAN_IT0_IRQn, 0, 0);
 80005c0:	2200      	movs	r2, #0
 80005c2:	2100      	movs	r1, #0
 80005c4:	2015      	movs	r0, #21
 80005c6:	f000 f9bd 	bl	8000944 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_FDCAN_IT0_IRQn);
 80005ca:	2015      	movs	r0, #21
 80005cc:	f000 f9cf 	bl	800096e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM17_FDCAN_IT1_IRQn, 0, 0);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2100      	movs	r1, #0
 80005d4:	2016      	movs	r0, #22
 80005d6:	f000 f9b5 	bl	8000944 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_FDCAN_IT1_IRQn);
 80005da:	2016      	movs	r0, #22
 80005dc:	f000 f9c7 	bl	800096e <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 80005e0:	46c0      	nop			@ (mov r8, r8)
 80005e2:	46bd      	mov	sp, r7
 80005e4:	b01d      	add	sp, #116	@ 0x74
 80005e6:	bd90      	pop	{r4, r7, pc}
 80005e8:	40006400 	.word	0x40006400
 80005ec:	40021000 	.word	0x40021000

080005f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005f4:	46c0      	nop			@ (mov r8, r8)
 80005f6:	e7fd      	b.n	80005f4 <NMI_Handler+0x4>

080005f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005fc:	46c0      	nop			@ (mov r8, r8)
 80005fe:	e7fd      	b.n	80005fc <HardFault_Handler+0x4>

08000600 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000604:	46c0      	nop			@ (mov r8, r8)
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}

0800060a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800060a:	b580      	push	{r7, lr}
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800060e:	46c0      	nop			@ (mov r8, r8)
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000618:	f000 f8b6 	bl	8000788 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800061c:	46c0      	nop			@ (mov r8, r8)
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
	...

08000624 <TIM16_FDCAN_IT0_IRQHandler>:

/**
  * @brief This function handles TIM16, FDCAN1_IT0 and FDCAN2_IT0 Interrupt.
  */
void TIM16_FDCAN_IT0_IRQHandler(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 0 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000628:	4b03      	ldr	r3, [pc, #12]	@ (8000638 <TIM16_FDCAN_IT0_IRQHandler+0x14>)
 800062a:	0018      	movs	r0, r3
 800062c:	f000 fb22 	bl	8000c74 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 1 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 1 */
}
 8000630:	46c0      	nop			@ (mov r8, r8)
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	46c0      	nop			@ (mov r8, r8)
 8000638:	20000028 	.word	0x20000028

0800063c <TIM17_FDCAN_IT1_IRQHandler>:

/**
  * @brief This function handles TIM17, FDCAN1_IT1 and FDCAN2_IT1 Interrupt.
  */
void TIM17_FDCAN_IT1_IRQHandler(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_FDCAN_IT1_IRQn 0 */

  /* USER CODE END TIM17_FDCAN_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000640:	4b03      	ldr	r3, [pc, #12]	@ (8000650 <TIM17_FDCAN_IT1_IRQHandler+0x14>)
 8000642:	0018      	movs	r0, r3
 8000644:	f000 fb16 	bl	8000c74 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN TIM17_FDCAN_IT1_IRQn 1 */

  /* USER CODE END TIM17_FDCAN_IT1_IRQn 1 */
}
 8000648:	46c0      	nop			@ (mov r8, r8)
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	46c0      	nop			@ (mov r8, r8)
 8000650:	20000028 	.word	0x20000028

08000654 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000658:	46c0      	nop			@ (mov r8, r8)
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
	...

08000660 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000660:	480d      	ldr	r0, [pc, #52]	@ (8000698 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000662:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000664:	f7ff fff6 	bl	8000654 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000668:	480c      	ldr	r0, [pc, #48]	@ (800069c <LoopForever+0x6>)
  ldr r1, =_edata
 800066a:	490d      	ldr	r1, [pc, #52]	@ (80006a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800066c:	4a0d      	ldr	r2, [pc, #52]	@ (80006a4 <LoopForever+0xe>)
  movs r3, #0
 800066e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000670:	e002      	b.n	8000678 <LoopCopyDataInit>

08000672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000676:	3304      	adds	r3, #4

08000678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800067a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800067c:	d3f9      	bcc.n	8000672 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800067e:	4a0a      	ldr	r2, [pc, #40]	@ (80006a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000680:	4c0a      	ldr	r4, [pc, #40]	@ (80006ac <LoopForever+0x16>)
  movs r3, #0
 8000682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000684:	e001      	b.n	800068a <LoopFillZerobss>

08000686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000688:	3204      	adds	r2, #4

0800068a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800068a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800068c:	d3fb      	bcc.n	8000686 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800068e:	f001 fde9 	bl	8002264 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000692:	f7ff fdc3 	bl	800021c <main>

08000696 <LoopForever>:

LoopForever:
  b LoopForever
 8000696:	e7fe      	b.n	8000696 <LoopForever>
  ldr   r0, =_estack
 8000698:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 800069c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006a0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006a4:	0800230c 	.word	0x0800230c
  ldr r2, =_sbss
 80006a8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006ac:	20000090 	.word	0x20000090

080006b0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006b0:	e7fe      	b.n	80006b0 <ADC1_COMP_IRQHandler>
	...

080006b4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006ba:	1dfb      	adds	r3, r7, #7
 80006bc:	2200      	movs	r2, #0
 80006be:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006c0:	4b0b      	ldr	r3, [pc, #44]	@ (80006f0 <HAL_Init+0x3c>)
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	4b0a      	ldr	r3, [pc, #40]	@ (80006f0 <HAL_Init+0x3c>)
 80006c6:	2180      	movs	r1, #128	@ 0x80
 80006c8:	0049      	lsls	r1, r1, #1
 80006ca:	430a      	orrs	r2, r1
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006ce:	2003      	movs	r0, #3
 80006d0:	f000 f810 	bl	80006f4 <HAL_InitTick>
 80006d4:	1e03      	subs	r3, r0, #0
 80006d6:	d003      	beq.n	80006e0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80006d8:	1dfb      	adds	r3, r7, #7
 80006da:	2201      	movs	r2, #1
 80006dc:	701a      	strb	r2, [r3, #0]
 80006de:	e001      	b.n	80006e4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80006e0:	f7ff feec 	bl	80004bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006e4:	1dfb      	adds	r3, r7, #7
 80006e6:	781b      	ldrb	r3, [r3, #0]
}
 80006e8:	0018      	movs	r0, r3
 80006ea:	46bd      	mov	sp, r7
 80006ec:	b002      	add	sp, #8
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40022000 	.word	0x40022000

080006f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006f4:	b590      	push	{r4, r7, lr}
 80006f6:	b085      	sub	sp, #20
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006fc:	230f      	movs	r3, #15
 80006fe:	18fb      	adds	r3, r7, r3
 8000700:	2200      	movs	r2, #0
 8000702:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000704:	4b1d      	ldr	r3, [pc, #116]	@ (800077c <HAL_InitTick+0x88>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d02b      	beq.n	8000764 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800070c:	4b1c      	ldr	r3, [pc, #112]	@ (8000780 <HAL_InitTick+0x8c>)
 800070e:	681c      	ldr	r4, [r3, #0]
 8000710:	4b1a      	ldr	r3, [pc, #104]	@ (800077c <HAL_InitTick+0x88>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	0019      	movs	r1, r3
 8000716:	23fa      	movs	r3, #250	@ 0xfa
 8000718:	0098      	lsls	r0, r3, #2
 800071a:	f7ff fcf3 	bl	8000104 <__udivsi3>
 800071e:	0003      	movs	r3, r0
 8000720:	0019      	movs	r1, r3
 8000722:	0020      	movs	r0, r4
 8000724:	f7ff fcee 	bl	8000104 <__udivsi3>
 8000728:	0003      	movs	r3, r0
 800072a:	0018      	movs	r0, r3
 800072c:	f000 f92f 	bl	800098e <HAL_SYSTICK_Config>
 8000730:	1e03      	subs	r3, r0, #0
 8000732:	d112      	bne.n	800075a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2b03      	cmp	r3, #3
 8000738:	d80a      	bhi.n	8000750 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800073a:	6879      	ldr	r1, [r7, #4]
 800073c:	2301      	movs	r3, #1
 800073e:	425b      	negs	r3, r3
 8000740:	2200      	movs	r2, #0
 8000742:	0018      	movs	r0, r3
 8000744:	f000 f8fe 	bl	8000944 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000748:	4b0e      	ldr	r3, [pc, #56]	@ (8000784 <HAL_InitTick+0x90>)
 800074a:	687a      	ldr	r2, [r7, #4]
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	e00d      	b.n	800076c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000750:	230f      	movs	r3, #15
 8000752:	18fb      	adds	r3, r7, r3
 8000754:	2201      	movs	r2, #1
 8000756:	701a      	strb	r2, [r3, #0]
 8000758:	e008      	b.n	800076c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800075a:	230f      	movs	r3, #15
 800075c:	18fb      	adds	r3, r7, r3
 800075e:	2201      	movs	r2, #1
 8000760:	701a      	strb	r2, [r3, #0]
 8000762:	e003      	b.n	800076c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000764:	230f      	movs	r3, #15
 8000766:	18fb      	adds	r3, r7, r3
 8000768:	2201      	movs	r2, #1
 800076a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800076c:	230f      	movs	r3, #15
 800076e:	18fb      	adds	r3, r7, r3
 8000770:	781b      	ldrb	r3, [r3, #0]
}
 8000772:	0018      	movs	r0, r3
 8000774:	46bd      	mov	sp, r7
 8000776:	b005      	add	sp, #20
 8000778:	bd90      	pop	{r4, r7, pc}
 800077a:	46c0      	nop			@ (mov r8, r8)
 800077c:	20000008 	.word	0x20000008
 8000780:	20000000 	.word	0x20000000
 8000784:	20000004 	.word	0x20000004

08000788 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800078c:	4b05      	ldr	r3, [pc, #20]	@ (80007a4 <HAL_IncTick+0x1c>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	001a      	movs	r2, r3
 8000792:	4b05      	ldr	r3, [pc, #20]	@ (80007a8 <HAL_IncTick+0x20>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	18d2      	adds	r2, r2, r3
 8000798:	4b03      	ldr	r3, [pc, #12]	@ (80007a8 <HAL_IncTick+0x20>)
 800079a:	601a      	str	r2, [r3, #0]
}
 800079c:	46c0      	nop			@ (mov r8, r8)
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	46c0      	nop			@ (mov r8, r8)
 80007a4:	20000008 	.word	0x20000008
 80007a8:	2000008c 	.word	0x2000008c

080007ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  return uwTick;
 80007b0:	4b02      	ldr	r3, [pc, #8]	@ (80007bc <HAL_GetTick+0x10>)
 80007b2:	681b      	ldr	r3, [r3, #0]
}
 80007b4:	0018      	movs	r0, r3
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	46c0      	nop			@ (mov r8, r8)
 80007bc:	2000008c 	.word	0x2000008c

080007c0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80007c8:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a06      	ldr	r2, [pc, #24]	@ (80007e8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80007ce:	4013      	ands	r3, r2
 80007d0:	0019      	movs	r1, r3
 80007d2:	4b04      	ldr	r3, [pc, #16]	@ (80007e4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80007d4:	687a      	ldr	r2, [r7, #4]
 80007d6:	430a      	orrs	r2, r1
 80007d8:	601a      	str	r2, [r3, #0]
}
 80007da:	46c0      	nop			@ (mov r8, r8)
 80007dc:	46bd      	mov	sp, r7
 80007de:	b002      	add	sp, #8
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	46c0      	nop			@ (mov r8, r8)
 80007e4:	40010000 	.word	0x40010000
 80007e8:	fffff9ff 	.word	0xfffff9ff

080007ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	0002      	movs	r2, r0
 80007f4:	1dfb      	adds	r3, r7, #7
 80007f6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007f8:	1dfb      	adds	r3, r7, #7
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80007fe:	d809      	bhi.n	8000814 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000800:	1dfb      	adds	r3, r7, #7
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	001a      	movs	r2, r3
 8000806:	231f      	movs	r3, #31
 8000808:	401a      	ands	r2, r3
 800080a:	4b04      	ldr	r3, [pc, #16]	@ (800081c <__NVIC_EnableIRQ+0x30>)
 800080c:	2101      	movs	r1, #1
 800080e:	4091      	lsls	r1, r2
 8000810:	000a      	movs	r2, r1
 8000812:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000814:	46c0      	nop			@ (mov r8, r8)
 8000816:	46bd      	mov	sp, r7
 8000818:	b002      	add	sp, #8
 800081a:	bd80      	pop	{r7, pc}
 800081c:	e000e100 	.word	0xe000e100

08000820 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000820:	b590      	push	{r4, r7, lr}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	0002      	movs	r2, r0
 8000828:	6039      	str	r1, [r7, #0]
 800082a:	1dfb      	adds	r3, r7, #7
 800082c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800082e:	1dfb      	adds	r3, r7, #7
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	2b7f      	cmp	r3, #127	@ 0x7f
 8000834:	d828      	bhi.n	8000888 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000836:	4a2f      	ldr	r2, [pc, #188]	@ (80008f4 <__NVIC_SetPriority+0xd4>)
 8000838:	1dfb      	adds	r3, r7, #7
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	b25b      	sxtb	r3, r3
 800083e:	089b      	lsrs	r3, r3, #2
 8000840:	33c0      	adds	r3, #192	@ 0xc0
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	589b      	ldr	r3, [r3, r2]
 8000846:	1dfa      	adds	r2, r7, #7
 8000848:	7812      	ldrb	r2, [r2, #0]
 800084a:	0011      	movs	r1, r2
 800084c:	2203      	movs	r2, #3
 800084e:	400a      	ands	r2, r1
 8000850:	00d2      	lsls	r2, r2, #3
 8000852:	21ff      	movs	r1, #255	@ 0xff
 8000854:	4091      	lsls	r1, r2
 8000856:	000a      	movs	r2, r1
 8000858:	43d2      	mvns	r2, r2
 800085a:	401a      	ands	r2, r3
 800085c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	019b      	lsls	r3, r3, #6
 8000862:	22ff      	movs	r2, #255	@ 0xff
 8000864:	401a      	ands	r2, r3
 8000866:	1dfb      	adds	r3, r7, #7
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	0018      	movs	r0, r3
 800086c:	2303      	movs	r3, #3
 800086e:	4003      	ands	r3, r0
 8000870:	00db      	lsls	r3, r3, #3
 8000872:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000874:	481f      	ldr	r0, [pc, #124]	@ (80008f4 <__NVIC_SetPriority+0xd4>)
 8000876:	1dfb      	adds	r3, r7, #7
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	b25b      	sxtb	r3, r3
 800087c:	089b      	lsrs	r3, r3, #2
 800087e:	430a      	orrs	r2, r1
 8000880:	33c0      	adds	r3, #192	@ 0xc0
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000886:	e031      	b.n	80008ec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000888:	4a1b      	ldr	r2, [pc, #108]	@ (80008f8 <__NVIC_SetPriority+0xd8>)
 800088a:	1dfb      	adds	r3, r7, #7
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	0019      	movs	r1, r3
 8000890:	230f      	movs	r3, #15
 8000892:	400b      	ands	r3, r1
 8000894:	3b08      	subs	r3, #8
 8000896:	089b      	lsrs	r3, r3, #2
 8000898:	3306      	adds	r3, #6
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	18d3      	adds	r3, r2, r3
 800089e:	3304      	adds	r3, #4
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	1dfa      	adds	r2, r7, #7
 80008a4:	7812      	ldrb	r2, [r2, #0]
 80008a6:	0011      	movs	r1, r2
 80008a8:	2203      	movs	r2, #3
 80008aa:	400a      	ands	r2, r1
 80008ac:	00d2      	lsls	r2, r2, #3
 80008ae:	21ff      	movs	r1, #255	@ 0xff
 80008b0:	4091      	lsls	r1, r2
 80008b2:	000a      	movs	r2, r1
 80008b4:	43d2      	mvns	r2, r2
 80008b6:	401a      	ands	r2, r3
 80008b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	019b      	lsls	r3, r3, #6
 80008be:	22ff      	movs	r2, #255	@ 0xff
 80008c0:	401a      	ands	r2, r3
 80008c2:	1dfb      	adds	r3, r7, #7
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	0018      	movs	r0, r3
 80008c8:	2303      	movs	r3, #3
 80008ca:	4003      	ands	r3, r0
 80008cc:	00db      	lsls	r3, r3, #3
 80008ce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008d0:	4809      	ldr	r0, [pc, #36]	@ (80008f8 <__NVIC_SetPriority+0xd8>)
 80008d2:	1dfb      	adds	r3, r7, #7
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	001c      	movs	r4, r3
 80008d8:	230f      	movs	r3, #15
 80008da:	4023      	ands	r3, r4
 80008dc:	3b08      	subs	r3, #8
 80008de:	089b      	lsrs	r3, r3, #2
 80008e0:	430a      	orrs	r2, r1
 80008e2:	3306      	adds	r3, #6
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	18c3      	adds	r3, r0, r3
 80008e8:	3304      	adds	r3, #4
 80008ea:	601a      	str	r2, [r3, #0]
}
 80008ec:	46c0      	nop			@ (mov r8, r8)
 80008ee:	46bd      	mov	sp, r7
 80008f0:	b003      	add	sp, #12
 80008f2:	bd90      	pop	{r4, r7, pc}
 80008f4:	e000e100 	.word	0xe000e100
 80008f8:	e000ed00 	.word	0xe000ed00

080008fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	1e5a      	subs	r2, r3, #1
 8000908:	2380      	movs	r3, #128	@ 0x80
 800090a:	045b      	lsls	r3, r3, #17
 800090c:	429a      	cmp	r2, r3
 800090e:	d301      	bcc.n	8000914 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000910:	2301      	movs	r3, #1
 8000912:	e010      	b.n	8000936 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000914:	4b0a      	ldr	r3, [pc, #40]	@ (8000940 <SysTick_Config+0x44>)
 8000916:	687a      	ldr	r2, [r7, #4]
 8000918:	3a01      	subs	r2, #1
 800091a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800091c:	2301      	movs	r3, #1
 800091e:	425b      	negs	r3, r3
 8000920:	2103      	movs	r1, #3
 8000922:	0018      	movs	r0, r3
 8000924:	f7ff ff7c 	bl	8000820 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000928:	4b05      	ldr	r3, [pc, #20]	@ (8000940 <SysTick_Config+0x44>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800092e:	4b04      	ldr	r3, [pc, #16]	@ (8000940 <SysTick_Config+0x44>)
 8000930:	2207      	movs	r2, #7
 8000932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000934:	2300      	movs	r3, #0
}
 8000936:	0018      	movs	r0, r3
 8000938:	46bd      	mov	sp, r7
 800093a:	b002      	add	sp, #8
 800093c:	bd80      	pop	{r7, pc}
 800093e:	46c0      	nop			@ (mov r8, r8)
 8000940:	e000e010 	.word	0xe000e010

08000944 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	60b9      	str	r1, [r7, #8]
 800094c:	607a      	str	r2, [r7, #4]
 800094e:	210f      	movs	r1, #15
 8000950:	187b      	adds	r3, r7, r1
 8000952:	1c02      	adds	r2, r0, #0
 8000954:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000956:	68ba      	ldr	r2, [r7, #8]
 8000958:	187b      	adds	r3, r7, r1
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	b25b      	sxtb	r3, r3
 800095e:	0011      	movs	r1, r2
 8000960:	0018      	movs	r0, r3
 8000962:	f7ff ff5d 	bl	8000820 <__NVIC_SetPriority>
}
 8000966:	46c0      	nop			@ (mov r8, r8)
 8000968:	46bd      	mov	sp, r7
 800096a:	b004      	add	sp, #16
 800096c:	bd80      	pop	{r7, pc}

0800096e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	b082      	sub	sp, #8
 8000972:	af00      	add	r7, sp, #0
 8000974:	0002      	movs	r2, r0
 8000976:	1dfb      	adds	r3, r7, #7
 8000978:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800097a:	1dfb      	adds	r3, r7, #7
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	b25b      	sxtb	r3, r3
 8000980:	0018      	movs	r0, r3
 8000982:	f7ff ff33 	bl	80007ec <__NVIC_EnableIRQ>
}
 8000986:	46c0      	nop			@ (mov r8, r8)
 8000988:	46bd      	mov	sp, r7
 800098a:	b002      	add	sp, #8
 800098c:	bd80      	pop	{r7, pc}

0800098e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	b082      	sub	sp, #8
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	0018      	movs	r0, r3
 800099a:	f7ff ffaf 	bl	80008fc <SysTick_Config>
 800099e:	0003      	movs	r3, r0
}
 80009a0:	0018      	movs	r0, r3
 80009a2:	46bd      	mov	sp, r7
 80009a4:	b002      	add	sp, #8
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d101      	bne.n	80009ba <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80009b6:	2301      	movs	r3, #1
 80009b8:	e14e      	b.n	8000c58 <HAL_FDCAN_Init+0x2b0>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	225c      	movs	r2, #92	@ 0x5c
 80009be:	5c9b      	ldrb	r3, [r3, r2]
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d107      	bne.n	80009d6 <HAL_FDCAN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	225d      	movs	r2, #93	@ 0x5d
 80009ca:	2100      	movs	r1, #0
 80009cc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	0018      	movs	r0, r3
 80009d2:	f7ff fd9b 	bl	800050c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	699a      	ldr	r2, [r3, #24]
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2110      	movs	r1, #16
 80009e2:	438a      	bics	r2, r1
 80009e4:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009e6:	f7ff fee1 	bl	80007ac <HAL_GetTick>
 80009ea:	0003      	movs	r3, r0
 80009ec:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80009ee:	e012      	b.n	8000a16 <HAL_FDCAN_Init+0x6e>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80009f0:	f7ff fedc 	bl	80007ac <HAL_GetTick>
 80009f4:	0002      	movs	r2, r0
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	2b0a      	cmp	r3, #10
 80009fc:	d90b      	bls.n	8000a16 <HAL_FDCAN_Init+0x6e>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a02:	2201      	movs	r2, #1
 8000a04:	431a      	orrs	r2, r3
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	225c      	movs	r2, #92	@ 0x5c
 8000a0e:	2103      	movs	r1, #3
 8000a10:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000a12:	2301      	movs	r3, #1
 8000a14:	e120      	b.n	8000c58 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	2208      	movs	r2, #8
 8000a1e:	4013      	ands	r3, r2
 8000a20:	2b08      	cmp	r3, #8
 8000a22:	d0e5      	beq.n	80009f0 <HAL_FDCAN_Init+0x48>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	699a      	ldr	r2, [r3, #24]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	2101      	movs	r1, #1
 8000a30:	430a      	orrs	r2, r1
 8000a32:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a34:	f7ff feba 	bl	80007ac <HAL_GetTick>
 8000a38:	0003      	movs	r3, r0
 8000a3a:	60fb      	str	r3, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000a3c:	e012      	b.n	8000a64 <HAL_FDCAN_Init+0xbc>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000a3e:	f7ff feb5 	bl	80007ac <HAL_GetTick>
 8000a42:	0002      	movs	r2, r0
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	1ad3      	subs	r3, r2, r3
 8000a48:	2b0a      	cmp	r3, #10
 8000a4a:	d90b      	bls.n	8000a64 <HAL_FDCAN_Init+0xbc>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a50:	2201      	movs	r2, #1
 8000a52:	431a      	orrs	r2, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	225c      	movs	r2, #92	@ 0x5c
 8000a5c:	2103      	movs	r1, #3
 8000a5e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000a60:	2301      	movs	r3, #1
 8000a62:	e0f9      	b.n	8000c58 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	699b      	ldr	r3, [r3, #24]
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	d0e6      	beq.n	8000a3e <HAL_FDCAN_Init+0x96>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	699a      	ldr	r2, [r3, #24]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	2102      	movs	r1, #2
 8000a7c:	430a      	orrs	r2, r1
 8000a7e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a76      	ldr	r2, [pc, #472]	@ (8000c60 <HAL_FDCAN_Init+0x2b8>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d103      	bne.n	8000a92 <HAL_FDCAN_Init+0xea>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000a8a:	4a76      	ldr	r2, [pc, #472]	@ (8000c64 <HAL_FDCAN_Init+0x2bc>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	7c1b      	ldrb	r3, [r3, #16]
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d108      	bne.n	8000aac <HAL_FDCAN_Init+0x104>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	699a      	ldr	r2, [r3, #24]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2140      	movs	r1, #64	@ 0x40
 8000aa6:	438a      	bics	r2, r1
 8000aa8:	619a      	str	r2, [r3, #24]
 8000aaa:	e007      	b.n	8000abc <HAL_FDCAN_Init+0x114>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	699a      	ldr	r2, [r3, #24]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	2140      	movs	r1, #64	@ 0x40
 8000ab8:	430a      	orrs	r2, r1
 8000aba:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	7c5b      	ldrb	r3, [r3, #17]
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d109      	bne.n	8000ad8 <HAL_FDCAN_Init+0x130>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	699a      	ldr	r2, [r3, #24]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	2180      	movs	r1, #128	@ 0x80
 8000ad0:	01c9      	lsls	r1, r1, #7
 8000ad2:	430a      	orrs	r2, r1
 8000ad4:	619a      	str	r2, [r3, #24]
 8000ad6:	e007      	b.n	8000ae8 <HAL_FDCAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	699a      	ldr	r2, [r3, #24]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4961      	ldr	r1, [pc, #388]	@ (8000c68 <HAL_FDCAN_Init+0x2c0>)
 8000ae4:	400a      	ands	r2, r1
 8000ae6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	7c9b      	ldrb	r3, [r3, #18]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d108      	bne.n	8000b02 <HAL_FDCAN_Init+0x15a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	699a      	ldr	r2, [r3, #24]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	495c      	ldr	r1, [pc, #368]	@ (8000c6c <HAL_FDCAN_Init+0x2c4>)
 8000afc:	400a      	ands	r2, r1
 8000afe:	619a      	str	r2, [r3, #24]
 8000b00:	e008      	b.n	8000b14 <HAL_FDCAN_Init+0x16c>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	699a      	ldr	r2, [r3, #24]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2180      	movs	r1, #128	@ 0x80
 8000b0e:	0149      	lsls	r1, r1, #5
 8000b10:	430a      	orrs	r2, r1
 8000b12:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	699b      	ldr	r3, [r3, #24]
 8000b1a:	4a55      	ldr	r2, [pc, #340]	@ (8000c70 <HAL_FDCAN_Init+0x2c8>)
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	0019      	movs	r1, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	689a      	ldr	r2, [r3, #8]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	430a      	orrs	r2, r1
 8000b2a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	699a      	ldr	r2, [r3, #24]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	21a4      	movs	r1, #164	@ 0xa4
 8000b38:	438a      	bics	r2, r1
 8000b3a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	691a      	ldr	r2, [r3, #16]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2110      	movs	r1, #16
 8000b48:	438a      	bics	r2, r1
 8000b4a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d108      	bne.n	8000b66 <HAL_FDCAN_Init+0x1be>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	699a      	ldr	r2, [r3, #24]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2104      	movs	r1, #4
 8000b60:	430a      	orrs	r2, r1
 8000b62:	619a      	str	r2, [r3, #24]
 8000b64:	e02c      	b.n	8000bc0 <HAL_FDCAN_Init+0x218>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	68db      	ldr	r3, [r3, #12]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d028      	beq.n	8000bc0 <HAL_FDCAN_Init+0x218>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	68db      	ldr	r3, [r3, #12]
 8000b72:	2b02      	cmp	r3, #2
 8000b74:	d01c      	beq.n	8000bb0 <HAL_FDCAN_Init+0x208>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	699a      	ldr	r2, [r3, #24]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2180      	movs	r1, #128	@ 0x80
 8000b82:	430a      	orrs	r2, r1
 8000b84:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	691a      	ldr	r2, [r3, #16]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2110      	movs	r1, #16
 8000b92:	430a      	orrs	r2, r1
 8000b94:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	68db      	ldr	r3, [r3, #12]
 8000b9a:	2b03      	cmp	r3, #3
 8000b9c:	d110      	bne.n	8000bc0 <HAL_FDCAN_Init+0x218>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	699a      	ldr	r2, [r3, #24]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2120      	movs	r1, #32
 8000baa:	430a      	orrs	r2, r1
 8000bac:	619a      	str	r2, [r3, #24]
 8000bae:	e007      	b.n	8000bc0 <HAL_FDCAN_Init+0x218>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	699a      	ldr	r2, [r3, #24]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	2120      	movs	r1, #32
 8000bbc:	430a      	orrs	r2, r1
 8000bbe:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	3b01      	subs	r3, #1
 8000bc6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	69db      	ldr	r3, [r3, #28]
 8000bcc:	3b01      	subs	r3, #1
 8000bce:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000bd0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6a1b      	ldr	r3, [r3, #32]
 8000bd6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000bd8:	431a      	orrs	r2, r3
 8000bda:	0011      	movs	r1, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	695b      	ldr	r3, [r3, #20]
 8000be0:	3b01      	subs	r3, #1
 8000be2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000be8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000bea:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	689a      	ldr	r2, [r3, #8]
 8000bf0:	23c0      	movs	r3, #192	@ 0xc0
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d115      	bne.n	8000c24 <HAL_FDCAN_Init+0x27c>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bfc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c02:	3b01      	subs	r3, #1
 8000c04:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000c06:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0c:	3b01      	subs	r3, #1
 8000c0e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000c10:	431a      	orrs	r2, r3
 8000c12:	0011      	movs	r1, r2
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c18:	3b01      	subs	r3, #1
 8000c1a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000c20:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000c22:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	22c0      	movs	r2, #192	@ 0xc0
 8000c2a:	5899      	ldr	r1, [r3, r2]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	430a      	orrs	r2, r1
 8000c36:	21c0      	movs	r1, #192	@ 0xc0
 8000c38:	505a      	str	r2, [r3, r1]

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f000 f9ad 	bl	8000f9c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2200      	movs	r2, #0
 8000c46:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	225c      	movs	r2, #92	@ 0x5c
 8000c52:	2101      	movs	r1, #1
 8000c54:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8000c56:	2300      	movs	r3, #0
}
 8000c58:	0018      	movs	r0, r3
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	b004      	add	sp, #16
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40006400 	.word	0x40006400
 8000c64:	40006500 	.word	0x40006500
 8000c68:	ffffbfff 	.word	0xffffbfff
 8000c6c:	ffffefff 	.word	0xffffefff
 8000c70:	fffffcff 	.word	0xfffffcff

08000c74 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08c      	sub	sp, #48	@ 0x30
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000c82:	23e0      	movs	r3, #224	@ 0xe0
 8000c84:	015b      	lsls	r3, r3, #5
 8000c86:	4013      	ands	r3, r2
 8000c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8000c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c92:	4013      	ands	r3, r2
 8000c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000c9c:	2207      	movs	r2, #7
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8000ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000caa:	4013      	ands	r3, r2
 8000cac:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000cb4:	2238      	movs	r2, #56	@ 0x38
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8000cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000ccc:	23f1      	movs	r3, #241	@ 0xf1
 8000cce:	041b      	lsls	r3, r3, #16
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8000cda:	6a3b      	ldr	r3, [r7, #32]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000ce6:	23e0      	movs	r3, #224	@ 0xe0
 8000ce8:	031b      	lsls	r3, r3, #12
 8000cea:	4013      	ands	r3, r2
 8000cec:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d00:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000d08:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	2240      	movs	r2, #64	@ 0x40
 8000d0e:	4013      	ands	r3, r2
 8000d10:	d00b      	beq.n	8000d2a <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8000d12:	69bb      	ldr	r3, [r7, #24]
 8000d14:	2240      	movs	r2, #64	@ 0x40
 8000d16:	4013      	ands	r3, r2
 8000d18:	d007      	beq.n	8000d2a <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	2240      	movs	r2, #64	@ 0x40
 8000d20:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	0018      	movs	r0, r3
 8000d26:	f000 f91f 	bl	8000f68 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8000d2a:	697a      	ldr	r2, [r7, #20]
 8000d2c:	2380      	movs	r3, #128	@ 0x80
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	4013      	ands	r3, r2
 8000d32:	d01b      	beq.n	8000d6c <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	2380      	movs	r3, #128	@ 0x80
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	d016      	beq.n	8000d6c <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	22d8      	movs	r2, #216	@ 0xd8
 8000d44:	589b      	ldr	r3, [r3, r2]
 8000d46:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	22e0      	movs	r2, #224	@ 0xe0
 8000d4e:	589a      	ldr	r2, [r3, r2]
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	4013      	ands	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2280      	movs	r2, #128	@ 0x80
 8000d5c:	0052      	lsls	r2, r2, #1
 8000d5e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	0011      	movs	r1, r2
 8000d66:	0018      	movs	r0, r3
 8000d68:	f000 f8e5 	bl	8000f36 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8000d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d009      	beq.n	8000d86 <HAL_FDCAN_IRQHandler+0x112>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000d78:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8000d7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	0011      	movs	r1, r2
 8000d80:	0018      	movs	r0, r3
 8000d82:	f000 f8ac 	bl	8000ede <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8000d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d009      	beq.n	8000da0 <HAL_FDCAN_IRQHandler+0x12c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000d92:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8000d94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	0011      	movs	r1, r2
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	f000 f8a8 	bl	8000ef0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8000da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d009      	beq.n	8000dba <HAL_FDCAN_IRQHandler+0x146>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000dac:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8000dae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	0011      	movs	r1, r2
 8000db4:	0018      	movs	r0, r3
 8000db6:	f000 f8a4 	bl	8000f02 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8000dba:	697a      	ldr	r2, [r7, #20]
 8000dbc:	2380      	movs	r3, #128	@ 0x80
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	d00d      	beq.n	8000de0 <HAL_FDCAN_IRQHandler+0x16c>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	2380      	movs	r3, #128	@ 0x80
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	4013      	ands	r3, r2
 8000dcc:	d008      	beq.n	8000de0 <HAL_FDCAN_IRQHandler+0x16c>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	2280      	movs	r2, #128	@ 0x80
 8000dd4:	0092      	lsls	r2, r2, #2
 8000dd6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	0018      	movs	r0, r3
 8000ddc:	f000 f89a 	bl	8000f14 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	2280      	movs	r2, #128	@ 0x80
 8000de4:	4013      	ands	r3, r2
 8000de6:	d019      	beq.n	8000e1c <HAL_FDCAN_IRQHandler+0x1a8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	2280      	movs	r2, #128	@ 0x80
 8000dec:	4013      	ands	r3, r2
 8000dee:	d015      	beq.n	8000e1c <HAL_FDCAN_IRQHandler+0x1a8>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	22d4      	movs	r2, #212	@ 0xd4
 8000df6:	589b      	ldr	r3, [r3, r2]
 8000df8:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	22dc      	movs	r2, #220	@ 0xdc
 8000e00:	589a      	ldr	r2, [r3, r2]
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	4013      	ands	r3, r2
 8000e06:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2280      	movs	r2, #128	@ 0x80
 8000e0e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8000e10:	68fa      	ldr	r2, [r7, #12]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	0011      	movs	r1, r2
 8000e16:	0018      	movs	r0, r3
 8000e18:	f000 f884 	bl	8000f24 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8000e1c:	697a      	ldr	r2, [r7, #20]
 8000e1e:	2380      	movs	r3, #128	@ 0x80
 8000e20:	019b      	lsls	r3, r3, #6
 8000e22:	4013      	ands	r3, r2
 8000e24:	d00d      	beq.n	8000e42 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	2380      	movs	r3, #128	@ 0x80
 8000e2a:	019b      	lsls	r3, r3, #6
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	d008      	beq.n	8000e42 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2280      	movs	r2, #128	@ 0x80
 8000e36:	0192      	lsls	r2, r2, #6
 8000e38:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f000 f883 	bl	8000f48 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8000e42:	697a      	ldr	r2, [r7, #20]
 8000e44:	2380      	movs	r3, #128	@ 0x80
 8000e46:	021b      	lsls	r3, r3, #8
 8000e48:	4013      	ands	r3, r2
 8000e4a:	d00d      	beq.n	8000e68 <HAL_FDCAN_IRQHandler+0x1f4>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	2380      	movs	r3, #128	@ 0x80
 8000e50:	021b      	lsls	r3, r3, #8
 8000e52:	4013      	ands	r3, r2
 8000e54:	d008      	beq.n	8000e68 <HAL_FDCAN_IRQHandler+0x1f4>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	2280      	movs	r2, #128	@ 0x80
 8000e5c:	0212      	lsls	r2, r2, #8
 8000e5e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	0018      	movs	r0, r3
 8000e64:	f000 f878 	bl	8000f58 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8000e68:	697a      	ldr	r2, [r7, #20]
 8000e6a:	2380      	movs	r3, #128	@ 0x80
 8000e6c:	01db      	lsls	r3, r3, #7
 8000e6e:	4013      	ands	r3, r2
 8000e70:	d00f      	beq.n	8000e92 <HAL_FDCAN_IRQHandler+0x21e>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	2380      	movs	r3, #128	@ 0x80
 8000e76:	01db      	lsls	r3, r3, #7
 8000e78:	4013      	ands	r3, r2
 8000e7a:	d00a      	beq.n	8000e92 <HAL_FDCAN_IRQHandler+0x21e>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2280      	movs	r2, #128	@ 0x80
 8000e82:	01d2      	lsls	r2, r2, #7
 8000e84:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e8a:	2280      	movs	r2, #128	@ 0x80
 8000e8c:	431a      	orrs	r2, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d009      	beq.n	8000eac <HAL_FDCAN_IRQHandler+0x238>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	69fa      	ldr	r2, [r7, #28]
 8000e9e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8000ea0:	69fa      	ldr	r2, [r7, #28]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	0011      	movs	r1, r2
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	f000 f86e 	bl	8000f88 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8000eac:	6a3b      	ldr	r3, [r7, #32]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d009      	beq.n	8000ec6 <HAL_FDCAN_IRQHandler+0x252>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	6a3a      	ldr	r2, [r7, #32]
 8000eb8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000ebe:	6a3b      	ldr	r3, [r7, #32]
 8000ec0:	431a      	orrs	r2, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d003      	beq.n	8000ed6 <HAL_FDCAN_IRQHandler+0x262>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f000 f851 	bl	8000f78 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8000ed6:	46c0      	nop			@ (mov r8, r8)
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	b00c      	add	sp, #48	@ 0x30
 8000edc:	bd80      	pop	{r7, pc}

08000ede <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
 8000ee6:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8000ee8:	46c0      	nop			@ (mov r8, r8)
 8000eea:	46bd      	mov	sp, r7
 8000eec:	b002      	add	sp, #8
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8000efa:	46c0      	nop			@ (mov r8, r8)
 8000efc:	46bd      	mov	sp, r7
 8000efe:	b002      	add	sp, #8
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
 8000f0a:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8000f0c:	46c0      	nop			@ (mov r8, r8)
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	b002      	add	sp, #8
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8000f1c:	46c0      	nop			@ (mov r8, r8)
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	b002      	add	sp, #8
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8000f2e:	46c0      	nop			@ (mov r8, r8)
 8000f30:	46bd      	mov	sp, r7
 8000f32:	b002      	add	sp, #8
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b082      	sub	sp, #8
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
 8000f3e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8000f40:	46c0      	nop			@ (mov r8, r8)
 8000f42:	46bd      	mov	sp, r7
 8000f44:	b002      	add	sp, #8
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8000f50:	46c0      	nop			@ (mov r8, r8)
 8000f52:	46bd      	mov	sp, r7
 8000f54:	b002      	add	sp, #8
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8000f60:	46c0      	nop			@ (mov r8, r8)
 8000f62:	46bd      	mov	sp, r7
 8000f64:	b002      	add	sp, #8
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8000f70:	46c0      	nop			@ (mov r8, r8)
 8000f72:	46bd      	mov	sp, r7
 8000f74:	b002      	add	sp, #8
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8000f80:	46c0      	nop			@ (mov r8, r8)
 8000f82:	46bd      	mov	sp, r7
 8000f84:	b002      	add	sp, #8
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8000f92:	46c0      	nop			@ (mov r8, r8)
 8000f94:	46bd      	mov	sp, r7
 8000f96:	b002      	add	sp, #8
 8000f98:	bd80      	pop	{r7, pc}
	...

08000f9c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8000fa4:	4b2f      	ldr	r3, [pc, #188]	@ (8001064 <FDCAN_CalcultateRamBlockAddresses+0xc8>)
 8000fa6:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a2e      	ldr	r2, [pc, #184]	@ (8001068 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d105      	bne.n	8000fbe <FDCAN_CalcultateRamBlockAddresses+0x22>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	22d4      	movs	r2, #212	@ 0xd4
 8000fb6:	0092      	lsls	r2, r2, #2
 8000fb8:	4694      	mov	ip, r2
 8000fba:	4463      	add	r3, ip
 8000fbc:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	68ba      	ldr	r2, [r7, #8]
 8000fc2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2280      	movs	r2, #128	@ 0x80
 8000fca:	589b      	ldr	r3, [r3, r2]
 8000fcc:	4a27      	ldr	r2, [pc, #156]	@ (800106c <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8000fce:	4013      	ands	r3, r2
 8000fd0:	0019      	movs	r1, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fd6:	041a      	lsls	r2, r3, #16
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	2180      	movs	r1, #128	@ 0x80
 8000fe0:	505a      	str	r2, [r3, r1]

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	3370      	adds	r3, #112	@ 0x70
 8000fe6:	001a      	movs	r2, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2280      	movs	r2, #128	@ 0x80
 8000ff2:	589b      	ldr	r3, [r3, r2]
 8000ff4:	4a1e      	ldr	r2, [pc, #120]	@ (8001070 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	0019      	movs	r1, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ffe:	061a      	lsls	r2, r3, #24
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	430a      	orrs	r2, r1
 8001006:	2180      	movs	r1, #128	@ 0x80
 8001008:	505a      	str	r2, [r3, r1]

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	33b0      	adds	r3, #176	@ 0xb0
 800100e:	001a      	movs	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	3389      	adds	r3, #137	@ 0x89
 8001018:	33ff      	adds	r3, #255	@ 0xff
 800101a:	001a      	movs	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	2298      	movs	r2, #152	@ 0x98
 8001024:	0092      	lsls	r2, r2, #2
 8001026:	189a      	adds	r2, r3, r2
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	229e      	movs	r2, #158	@ 0x9e
 8001030:	0092      	lsls	r2, r2, #2
 8001032:	189a      	adds	r2, r3, r2
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	e005      	b.n	800104a <FDCAN_CalcultateRamBlockAddresses+0xae>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	3304      	adds	r3, #4
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	22d4      	movs	r2, #212	@ 0xd4
 800104e:	0092      	lsls	r2, r2, #2
 8001050:	4694      	mov	ip, r2
 8001052:	4463      	add	r3, ip
 8001054:	68fa      	ldr	r2, [r7, #12]
 8001056:	429a      	cmp	r2, r3
 8001058:	d3f1      	bcc.n	800103e <FDCAN_CalcultateRamBlockAddresses+0xa2>
  }
}
 800105a:	46c0      	nop			@ (mov r8, r8)
 800105c:	46c0      	nop			@ (mov r8, r8)
 800105e:	46bd      	mov	sp, r7
 8001060:	b004      	add	sp, #16
 8001062:	bd80      	pop	{r7, pc}
 8001064:	4000b400 	.word	0x4000b400
 8001068:	40006800 	.word	0x40006800
 800106c:	ffe0ffff 	.word	0xffe0ffff
 8001070:	f0ffffff 	.word	0xf0ffffff

08001074 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001082:	e14d      	b.n	8001320 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2101      	movs	r1, #1
 800108a:	697a      	ldr	r2, [r7, #20]
 800108c:	4091      	lsls	r1, r2
 800108e:	000a      	movs	r2, r1
 8001090:	4013      	ands	r3, r2
 8001092:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d100      	bne.n	800109c <HAL_GPIO_Init+0x28>
 800109a:	e13e      	b.n	800131a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	2203      	movs	r2, #3
 80010a2:	4013      	ands	r3, r2
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d005      	beq.n	80010b4 <HAL_GPIO_Init+0x40>
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	2203      	movs	r2, #3
 80010ae:	4013      	ands	r3, r2
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d130      	bne.n	8001116 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	2203      	movs	r2, #3
 80010c0:	409a      	lsls	r2, r3
 80010c2:	0013      	movs	r3, r2
 80010c4:	43da      	mvns	r2, r3
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	4013      	ands	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	68da      	ldr	r2, [r3, #12]
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	409a      	lsls	r2, r3
 80010d6:	0013      	movs	r3, r2
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	4313      	orrs	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010ea:	2201      	movs	r2, #1
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	409a      	lsls	r2, r3
 80010f0:	0013      	movs	r3, r2
 80010f2:	43da      	mvns	r2, r3
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	4013      	ands	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	091b      	lsrs	r3, r3, #4
 8001100:	2201      	movs	r2, #1
 8001102:	401a      	ands	r2, r3
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	409a      	lsls	r2, r3
 8001108:	0013      	movs	r3, r2
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	4313      	orrs	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	2203      	movs	r2, #3
 800111c:	4013      	ands	r3, r2
 800111e:	2b03      	cmp	r3, #3
 8001120:	d017      	beq.n	8001152 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	2203      	movs	r2, #3
 800112e:	409a      	lsls	r2, r3
 8001130:	0013      	movs	r3, r2
 8001132:	43da      	mvns	r2, r3
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	4013      	ands	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	689a      	ldr	r2, [r3, #8]
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	409a      	lsls	r2, r3
 8001144:	0013      	movs	r3, r2
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	4313      	orrs	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	2203      	movs	r2, #3
 8001158:	4013      	ands	r3, r2
 800115a:	2b02      	cmp	r3, #2
 800115c:	d123      	bne.n	80011a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	08da      	lsrs	r2, r3, #3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3208      	adds	r2, #8
 8001166:	0092      	lsls	r2, r2, #2
 8001168:	58d3      	ldr	r3, [r2, r3]
 800116a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	2207      	movs	r2, #7
 8001170:	4013      	ands	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	220f      	movs	r2, #15
 8001176:	409a      	lsls	r2, r3
 8001178:	0013      	movs	r3, r2
 800117a:	43da      	mvns	r2, r3
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	4013      	ands	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	691a      	ldr	r2, [r3, #16]
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	2107      	movs	r1, #7
 800118a:	400b      	ands	r3, r1
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	409a      	lsls	r2, r3
 8001190:	0013      	movs	r3, r2
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	4313      	orrs	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	08da      	lsrs	r2, r3, #3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3208      	adds	r2, #8
 80011a0:	0092      	lsls	r2, r2, #2
 80011a2:	6939      	ldr	r1, [r7, #16]
 80011a4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	2203      	movs	r2, #3
 80011b2:	409a      	lsls	r2, r3
 80011b4:	0013      	movs	r3, r2
 80011b6:	43da      	mvns	r2, r3
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	4013      	ands	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	2203      	movs	r2, #3
 80011c4:	401a      	ands	r2, r3
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	409a      	lsls	r2, r3
 80011cc:	0013      	movs	r3, r2
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685a      	ldr	r2, [r3, #4]
 80011de:	23c0      	movs	r3, #192	@ 0xc0
 80011e0:	029b      	lsls	r3, r3, #10
 80011e2:	4013      	ands	r3, r2
 80011e4:	d100      	bne.n	80011e8 <HAL_GPIO_Init+0x174>
 80011e6:	e098      	b.n	800131a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80011e8:	4a53      	ldr	r2, [pc, #332]	@ (8001338 <HAL_GPIO_Init+0x2c4>)
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	089b      	lsrs	r3, r3, #2
 80011ee:	3318      	adds	r3, #24
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	589b      	ldr	r3, [r3, r2]
 80011f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	2203      	movs	r2, #3
 80011fa:	4013      	ands	r3, r2
 80011fc:	00db      	lsls	r3, r3, #3
 80011fe:	220f      	movs	r2, #15
 8001200:	409a      	lsls	r2, r3
 8001202:	0013      	movs	r3, r2
 8001204:	43da      	mvns	r2, r3
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	4013      	ands	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	23a0      	movs	r3, #160	@ 0xa0
 8001210:	05db      	lsls	r3, r3, #23
 8001212:	429a      	cmp	r2, r3
 8001214:	d019      	beq.n	800124a <HAL_GPIO_Init+0x1d6>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a48      	ldr	r2, [pc, #288]	@ (800133c <HAL_GPIO_Init+0x2c8>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d013      	beq.n	8001246 <HAL_GPIO_Init+0x1d2>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a47      	ldr	r2, [pc, #284]	@ (8001340 <HAL_GPIO_Init+0x2cc>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d00d      	beq.n	8001242 <HAL_GPIO_Init+0x1ce>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a46      	ldr	r2, [pc, #280]	@ (8001344 <HAL_GPIO_Init+0x2d0>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d007      	beq.n	800123e <HAL_GPIO_Init+0x1ca>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a45      	ldr	r2, [pc, #276]	@ (8001348 <HAL_GPIO_Init+0x2d4>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d101      	bne.n	800123a <HAL_GPIO_Init+0x1c6>
 8001236:	2304      	movs	r3, #4
 8001238:	e008      	b.n	800124c <HAL_GPIO_Init+0x1d8>
 800123a:	2305      	movs	r3, #5
 800123c:	e006      	b.n	800124c <HAL_GPIO_Init+0x1d8>
 800123e:	2303      	movs	r3, #3
 8001240:	e004      	b.n	800124c <HAL_GPIO_Init+0x1d8>
 8001242:	2302      	movs	r3, #2
 8001244:	e002      	b.n	800124c <HAL_GPIO_Init+0x1d8>
 8001246:	2301      	movs	r3, #1
 8001248:	e000      	b.n	800124c <HAL_GPIO_Init+0x1d8>
 800124a:	2300      	movs	r3, #0
 800124c:	697a      	ldr	r2, [r7, #20]
 800124e:	2103      	movs	r1, #3
 8001250:	400a      	ands	r2, r1
 8001252:	00d2      	lsls	r2, r2, #3
 8001254:	4093      	lsls	r3, r2
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	4313      	orrs	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800125c:	4936      	ldr	r1, [pc, #216]	@ (8001338 <HAL_GPIO_Init+0x2c4>)
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	089b      	lsrs	r3, r3, #2
 8001262:	3318      	adds	r3, #24
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800126a:	4b33      	ldr	r3, [pc, #204]	@ (8001338 <HAL_GPIO_Init+0x2c4>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	43da      	mvns	r2, r3
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	4013      	ands	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685a      	ldr	r2, [r3, #4]
 800127e:	2380      	movs	r3, #128	@ 0x80
 8001280:	035b      	lsls	r3, r3, #13
 8001282:	4013      	ands	r3, r2
 8001284:	d003      	beq.n	800128e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	4313      	orrs	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800128e:	4b2a      	ldr	r3, [pc, #168]	@ (8001338 <HAL_GPIO_Init+0x2c4>)
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001294:	4b28      	ldr	r3, [pc, #160]	@ (8001338 <HAL_GPIO_Init+0x2c4>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	43da      	mvns	r2, r3
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	4013      	ands	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685a      	ldr	r2, [r3, #4]
 80012a8:	2380      	movs	r3, #128	@ 0x80
 80012aa:	039b      	lsls	r3, r3, #14
 80012ac:	4013      	ands	r3, r2
 80012ae:	d003      	beq.n	80012b8 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001338 <HAL_GPIO_Init+0x2c4>)
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012be:	4a1e      	ldr	r2, [pc, #120]	@ (8001338 <HAL_GPIO_Init+0x2c4>)
 80012c0:	2384      	movs	r3, #132	@ 0x84
 80012c2:	58d3      	ldr	r3, [r2, r3]
 80012c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	43da      	mvns	r2, r3
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	4013      	ands	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685a      	ldr	r2, [r3, #4]
 80012d4:	2380      	movs	r3, #128	@ 0x80
 80012d6:	029b      	lsls	r3, r3, #10
 80012d8:	4013      	ands	r3, r2
 80012da:	d003      	beq.n	80012e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012e4:	4914      	ldr	r1, [pc, #80]	@ (8001338 <HAL_GPIO_Init+0x2c4>)
 80012e6:	2284      	movs	r2, #132	@ 0x84
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80012ec:	4a12      	ldr	r2, [pc, #72]	@ (8001338 <HAL_GPIO_Init+0x2c4>)
 80012ee:	2380      	movs	r3, #128	@ 0x80
 80012f0:	58d3      	ldr	r3, [r2, r3]
 80012f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	43da      	mvns	r2, r3
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	4013      	ands	r3, r2
 80012fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685a      	ldr	r2, [r3, #4]
 8001302:	2380      	movs	r3, #128	@ 0x80
 8001304:	025b      	lsls	r3, r3, #9
 8001306:	4013      	ands	r3, r2
 8001308:	d003      	beq.n	8001312 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	4313      	orrs	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001312:	4909      	ldr	r1, [pc, #36]	@ (8001338 <HAL_GPIO_Init+0x2c4>)
 8001314:	2280      	movs	r2, #128	@ 0x80
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	3301      	adds	r3, #1
 800131e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	40da      	lsrs	r2, r3
 8001328:	1e13      	subs	r3, r2, #0
 800132a:	d000      	beq.n	800132e <HAL_GPIO_Init+0x2ba>
 800132c:	e6aa      	b.n	8001084 <HAL_GPIO_Init+0x10>
  }
}
 800132e:	46c0      	nop			@ (mov r8, r8)
 8001330:	46c0      	nop			@ (mov r8, r8)
 8001332:	46bd      	mov	sp, r7
 8001334:	b006      	add	sp, #24
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40021800 	.word	0x40021800
 800133c:	50000400 	.word	0x50000400
 8001340:	50000800 	.word	0x50000800
 8001344:	50000c00 	.word	0x50000c00
 8001348:	50001000 	.word	0x50001000

0800134c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	0008      	movs	r0, r1
 8001356:	0011      	movs	r1, r2
 8001358:	1cbb      	adds	r3, r7, #2
 800135a:	1c02      	adds	r2, r0, #0
 800135c:	801a      	strh	r2, [r3, #0]
 800135e:	1c7b      	adds	r3, r7, #1
 8001360:	1c0a      	adds	r2, r1, #0
 8001362:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001364:	1c7b      	adds	r3, r7, #1
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d004      	beq.n	8001376 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800136c:	1cbb      	adds	r3, r7, #2
 800136e:	881a      	ldrh	r2, [r3, #0]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001374:	e003      	b.n	800137e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001376:	1cbb      	adds	r3, r7, #2
 8001378:	881a      	ldrh	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800137e:	46c0      	nop			@ (mov r8, r8)
 8001380:	46bd      	mov	sp, r7
 8001382:	b002      	add	sp, #8
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001390:	4b19      	ldr	r3, [pc, #100]	@ (80013f8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a19      	ldr	r2, [pc, #100]	@ (80013fc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001396:	4013      	ands	r3, r2
 8001398:	0019      	movs	r1, r3
 800139a:	4b17      	ldr	r3, [pc, #92]	@ (80013f8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	430a      	orrs	r2, r1
 80013a0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	2380      	movs	r3, #128	@ 0x80
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d11f      	bne.n	80013ec <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80013ac:	4b14      	ldr	r3, [pc, #80]	@ (8001400 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	0013      	movs	r3, r2
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	189b      	adds	r3, r3, r2
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	4912      	ldr	r1, [pc, #72]	@ (8001404 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80013ba:	0018      	movs	r0, r3
 80013bc:	f7fe fea2 	bl	8000104 <__udivsi3>
 80013c0:	0003      	movs	r3, r0
 80013c2:	3301      	adds	r3, #1
 80013c4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013c6:	e008      	b.n	80013da <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	3b01      	subs	r3, #1
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	e001      	b.n	80013da <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e009      	b.n	80013ee <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013da:	4b07      	ldr	r3, [pc, #28]	@ (80013f8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80013dc:	695a      	ldr	r2, [r3, #20]
 80013de:	2380      	movs	r3, #128	@ 0x80
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	401a      	ands	r2, r3
 80013e4:	2380      	movs	r3, #128	@ 0x80
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d0ed      	beq.n	80013c8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	0018      	movs	r0, r3
 80013f0:	46bd      	mov	sp, r7
 80013f2:	b004      	add	sp, #16
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	46c0      	nop			@ (mov r8, r8)
 80013f8:	40007000 	.word	0x40007000
 80013fc:	fffff9ff 	.word	0xfffff9ff
 8001400:	20000000 	.word	0x20000000
 8001404:	000f4240 	.word	0x000f4240

08001408 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b088      	sub	sp, #32
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d102      	bne.n	800141c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	f000 fb50 	bl	8001abc <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2201      	movs	r2, #1
 8001422:	4013      	ands	r3, r2
 8001424:	d100      	bne.n	8001428 <HAL_RCC_OscConfig+0x20>
 8001426:	e07c      	b.n	8001522 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001428:	4bc3      	ldr	r3, [pc, #780]	@ (8001738 <HAL_RCC_OscConfig+0x330>)
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	2238      	movs	r2, #56	@ 0x38
 800142e:	4013      	ands	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001432:	4bc1      	ldr	r3, [pc, #772]	@ (8001738 <HAL_RCC_OscConfig+0x330>)
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	2203      	movs	r2, #3
 8001438:	4013      	ands	r3, r2
 800143a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	2b10      	cmp	r3, #16
 8001440:	d102      	bne.n	8001448 <HAL_RCC_OscConfig+0x40>
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	2b03      	cmp	r3, #3
 8001446:	d002      	beq.n	800144e <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	2b08      	cmp	r3, #8
 800144c:	d10b      	bne.n	8001466 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800144e:	4bba      	ldr	r3, [pc, #744]	@ (8001738 <HAL_RCC_OscConfig+0x330>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	2380      	movs	r3, #128	@ 0x80
 8001454:	029b      	lsls	r3, r3, #10
 8001456:	4013      	ands	r3, r2
 8001458:	d062      	beq.n	8001520 <HAL_RCC_OscConfig+0x118>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d15e      	bne.n	8001520 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e32a      	b.n	8001abc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685a      	ldr	r2, [r3, #4]
 800146a:	2380      	movs	r3, #128	@ 0x80
 800146c:	025b      	lsls	r3, r3, #9
 800146e:	429a      	cmp	r2, r3
 8001470:	d107      	bne.n	8001482 <HAL_RCC_OscConfig+0x7a>
 8001472:	4bb1      	ldr	r3, [pc, #708]	@ (8001738 <HAL_RCC_OscConfig+0x330>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	4bb0      	ldr	r3, [pc, #704]	@ (8001738 <HAL_RCC_OscConfig+0x330>)
 8001478:	2180      	movs	r1, #128	@ 0x80
 800147a:	0249      	lsls	r1, r1, #9
 800147c:	430a      	orrs	r2, r1
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	e020      	b.n	80014c4 <HAL_RCC_OscConfig+0xbc>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685a      	ldr	r2, [r3, #4]
 8001486:	23a0      	movs	r3, #160	@ 0xa0
 8001488:	02db      	lsls	r3, r3, #11
 800148a:	429a      	cmp	r2, r3
 800148c:	d10e      	bne.n	80014ac <HAL_RCC_OscConfig+0xa4>
 800148e:	4baa      	ldr	r3, [pc, #680]	@ (8001738 <HAL_RCC_OscConfig+0x330>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	4ba9      	ldr	r3, [pc, #676]	@ (8001738 <HAL_RCC_OscConfig+0x330>)
 8001494:	2180      	movs	r1, #128	@ 0x80
 8001496:	02c9      	lsls	r1, r1, #11
 8001498:	430a      	orrs	r2, r1
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	4ba6      	ldr	r3, [pc, #664]	@ (8001738 <HAL_RCC_OscConfig+0x330>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	4ba5      	ldr	r3, [pc, #660]	@ (8001738 <HAL_RCC_OscConfig+0x330>)
 80014a2:	2180      	movs	r1, #128	@ 0x80
 80014a4:	0249      	lsls	r1, r1, #9
 80014a6:	430a      	orrs	r2, r1
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	e00b      	b.n	80014c4 <HAL_RCC_OscConfig+0xbc>
 80014ac:	4ba2      	ldr	r3, [pc, #648]	@ (8001738 <HAL_RCC_OscConfig+0x330>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4ba1      	ldr	r3, [pc, #644]	@ (8001738 <HAL_RCC_OscConfig+0x330>)
 80014b2:	49a2      	ldr	r1, [pc, #648]	@ (800173c <HAL_RCC_OscConfig+0x334>)
 80014b4:	400a      	ands	r2, r1
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	4b9f      	ldr	r3, [pc, #636]	@ (8001738 <HAL_RCC_OscConfig+0x330>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	4b9e      	ldr	r3, [pc, #632]	@ (8001738 <HAL_RCC_OscConfig+0x330>)
 80014be:	49a0      	ldr	r1, [pc, #640]	@ (8001740 <HAL_RCC_OscConfig+0x338>)
 80014c0:	400a      	ands	r2, r1
 80014c2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d014      	beq.n	80014f6 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014cc:	f7ff f96e 	bl	80007ac <HAL_GetTick>
 80014d0:	0003      	movs	r3, r0
 80014d2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014d6:	f7ff f969 	bl	80007ac <HAL_GetTick>
 80014da:	0002      	movs	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b64      	cmp	r3, #100	@ 0x64
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e2e9      	b.n	8001abc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014e8:	4b93      	ldr	r3, [pc, #588]	@ (8001738 <HAL_RCC_OscConfig+0x330>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	2380      	movs	r3, #128	@ 0x80
 80014ee:	029b      	lsls	r3, r3, #10
 80014f0:	4013      	ands	r3, r2
 80014f2:	d0f0      	beq.n	80014d6 <HAL_RCC_OscConfig+0xce>
 80014f4:	e015      	b.n	8001522 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f6:	f7ff f959 	bl	80007ac <HAL_GetTick>
 80014fa:	0003      	movs	r3, r0
 80014fc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001500:	f7ff f954 	bl	80007ac <HAL_GetTick>
 8001504:	0002      	movs	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b64      	cmp	r3, #100	@ 0x64
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e2d4      	b.n	8001abc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001512:	4b89      	ldr	r3, [pc, #548]	@ (8001738 <HAL_RCC_OscConfig+0x330>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	2380      	movs	r3, #128	@ 0x80
 8001518:	029b      	lsls	r3, r3, #10
 800151a:	4013      	ands	r3, r2
 800151c:	d1f0      	bne.n	8001500 <HAL_RCC_OscConfig+0xf8>
 800151e:	e000      	b.n	8001522 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001520:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2202      	movs	r2, #2
 8001528:	4013      	ands	r3, r2
 800152a:	d100      	bne.n	800152e <HAL_RCC_OscConfig+0x126>
 800152c:	e099      	b.n	8001662 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800152e:	4b82      	ldr	r3, [pc, #520]	@ (8001738 <HAL_RCC_OscConfig+0x330>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	2238      	movs	r2, #56	@ 0x38
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001538:	4b7f      	ldr	r3, [pc, #508]	@ (8001738 <HAL_RCC_OscConfig+0x330>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	2203      	movs	r2, #3
 800153e:	4013      	ands	r3, r2
 8001540:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	2b10      	cmp	r3, #16
 8001546:	d102      	bne.n	800154e <HAL_RCC_OscConfig+0x146>
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	2b02      	cmp	r3, #2
 800154c:	d002      	beq.n	8001554 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d135      	bne.n	80015c0 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001554:	4b78      	ldr	r3, [pc, #480]	@ (8001738 <HAL_RCC_OscConfig+0x330>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	2380      	movs	r3, #128	@ 0x80
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	4013      	ands	r3, r2
 800155e:	d005      	beq.n	800156c <HAL_RCC_OscConfig+0x164>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d101      	bne.n	800156c <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e2a7      	b.n	8001abc <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800156c:	4b72      	ldr	r3, [pc, #456]	@ (8001738 <HAL_RCC_OscConfig+0x330>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	4a74      	ldr	r2, [pc, #464]	@ (8001744 <HAL_RCC_OscConfig+0x33c>)
 8001572:	4013      	ands	r3, r2
 8001574:	0019      	movs	r1, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	021a      	lsls	r2, r3, #8
 800157c:	4b6e      	ldr	r3, [pc, #440]	@ (8001738 <HAL_RCC_OscConfig+0x330>)
 800157e:	430a      	orrs	r2, r1
 8001580:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d112      	bne.n	80015ae <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001588:	4b6b      	ldr	r3, [pc, #428]	@ (8001738 <HAL_RCC_OscConfig+0x330>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a6e      	ldr	r2, [pc, #440]	@ (8001748 <HAL_RCC_OscConfig+0x340>)
 800158e:	4013      	ands	r3, r2
 8001590:	0019      	movs	r1, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	691a      	ldr	r2, [r3, #16]
 8001596:	4b68      	ldr	r3, [pc, #416]	@ (8001738 <HAL_RCC_OscConfig+0x330>)
 8001598:	430a      	orrs	r2, r1
 800159a:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800159c:	4b66      	ldr	r3, [pc, #408]	@ (8001738 <HAL_RCC_OscConfig+0x330>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	0adb      	lsrs	r3, r3, #11
 80015a2:	2207      	movs	r2, #7
 80015a4:	4013      	ands	r3, r2
 80015a6:	4a69      	ldr	r2, [pc, #420]	@ (800174c <HAL_RCC_OscConfig+0x344>)
 80015a8:	40da      	lsrs	r2, r3
 80015aa:	4b69      	ldr	r3, [pc, #420]	@ (8001750 <HAL_RCC_OscConfig+0x348>)
 80015ac:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80015ae:	4b69      	ldr	r3, [pc, #420]	@ (8001754 <HAL_RCC_OscConfig+0x34c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	0018      	movs	r0, r3
 80015b4:	f7ff f89e 	bl	80006f4 <HAL_InitTick>
 80015b8:	1e03      	subs	r3, r0, #0
 80015ba:	d051      	beq.n	8001660 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e27d      	b.n	8001abc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d030      	beq.n	800162a <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80015c8:	4b5b      	ldr	r3, [pc, #364]	@ (8001738 <HAL_RCC_OscConfig+0x330>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a5e      	ldr	r2, [pc, #376]	@ (8001748 <HAL_RCC_OscConfig+0x340>)
 80015ce:	4013      	ands	r3, r2
 80015d0:	0019      	movs	r1, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	691a      	ldr	r2, [r3, #16]
 80015d6:	4b58      	ldr	r3, [pc, #352]	@ (8001738 <HAL_RCC_OscConfig+0x330>)
 80015d8:	430a      	orrs	r2, r1
 80015da:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80015dc:	4b56      	ldr	r3, [pc, #344]	@ (8001738 <HAL_RCC_OscConfig+0x330>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4b55      	ldr	r3, [pc, #340]	@ (8001738 <HAL_RCC_OscConfig+0x330>)
 80015e2:	2180      	movs	r1, #128	@ 0x80
 80015e4:	0049      	lsls	r1, r1, #1
 80015e6:	430a      	orrs	r2, r1
 80015e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ea:	f7ff f8df 	bl	80007ac <HAL_GetTick>
 80015ee:	0003      	movs	r3, r0
 80015f0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015f4:	f7ff f8da 	bl	80007ac <HAL_GetTick>
 80015f8:	0002      	movs	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e25a      	b.n	8001abc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001606:	4b4c      	ldr	r3, [pc, #304]	@ (8001738 <HAL_RCC_OscConfig+0x330>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	2380      	movs	r3, #128	@ 0x80
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	4013      	ands	r3, r2
 8001610:	d0f0      	beq.n	80015f4 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001612:	4b49      	ldr	r3, [pc, #292]	@ (8001738 <HAL_RCC_OscConfig+0x330>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	4a4b      	ldr	r2, [pc, #300]	@ (8001744 <HAL_RCC_OscConfig+0x33c>)
 8001618:	4013      	ands	r3, r2
 800161a:	0019      	movs	r1, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	695b      	ldr	r3, [r3, #20]
 8001620:	021a      	lsls	r2, r3, #8
 8001622:	4b45      	ldr	r3, [pc, #276]	@ (8001738 <HAL_RCC_OscConfig+0x330>)
 8001624:	430a      	orrs	r2, r1
 8001626:	605a      	str	r2, [r3, #4]
 8001628:	e01b      	b.n	8001662 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800162a:	4b43      	ldr	r3, [pc, #268]	@ (8001738 <HAL_RCC_OscConfig+0x330>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	4b42      	ldr	r3, [pc, #264]	@ (8001738 <HAL_RCC_OscConfig+0x330>)
 8001630:	4949      	ldr	r1, [pc, #292]	@ (8001758 <HAL_RCC_OscConfig+0x350>)
 8001632:	400a      	ands	r2, r1
 8001634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001636:	f7ff f8b9 	bl	80007ac <HAL_GetTick>
 800163a:	0003      	movs	r3, r0
 800163c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001640:	f7ff f8b4 	bl	80007ac <HAL_GetTick>
 8001644:	0002      	movs	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e234      	b.n	8001abc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001652:	4b39      	ldr	r3, [pc, #228]	@ (8001738 <HAL_RCC_OscConfig+0x330>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	2380      	movs	r3, #128	@ 0x80
 8001658:	00db      	lsls	r3, r3, #3
 800165a:	4013      	ands	r3, r2
 800165c:	d1f0      	bne.n	8001640 <HAL_RCC_OscConfig+0x238>
 800165e:	e000      	b.n	8001662 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001660:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2208      	movs	r2, #8
 8001668:	4013      	ands	r3, r2
 800166a:	d047      	beq.n	80016fc <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800166c:	4b32      	ldr	r3, [pc, #200]	@ (8001738 <HAL_RCC_OscConfig+0x330>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	2238      	movs	r2, #56	@ 0x38
 8001672:	4013      	ands	r3, r2
 8001674:	2b18      	cmp	r3, #24
 8001676:	d10a      	bne.n	800168e <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001678:	4b2f      	ldr	r3, [pc, #188]	@ (8001738 <HAL_RCC_OscConfig+0x330>)
 800167a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800167c:	2202      	movs	r2, #2
 800167e:	4013      	ands	r3, r2
 8001680:	d03c      	beq.n	80016fc <HAL_RCC_OscConfig+0x2f4>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d138      	bne.n	80016fc <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e216      	b.n	8001abc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d019      	beq.n	80016ca <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001696:	4b28      	ldr	r3, [pc, #160]	@ (8001738 <HAL_RCC_OscConfig+0x330>)
 8001698:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800169a:	4b27      	ldr	r3, [pc, #156]	@ (8001738 <HAL_RCC_OscConfig+0x330>)
 800169c:	2101      	movs	r1, #1
 800169e:	430a      	orrs	r2, r1
 80016a0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a2:	f7ff f883 	bl	80007ac <HAL_GetTick>
 80016a6:	0003      	movs	r3, r0
 80016a8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ac:	f7ff f87e 	bl	80007ac <HAL_GetTick>
 80016b0:	0002      	movs	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e1fe      	b.n	8001abc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016be:	4b1e      	ldr	r3, [pc, #120]	@ (8001738 <HAL_RCC_OscConfig+0x330>)
 80016c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016c2:	2202      	movs	r2, #2
 80016c4:	4013      	ands	r3, r2
 80016c6:	d0f1      	beq.n	80016ac <HAL_RCC_OscConfig+0x2a4>
 80016c8:	e018      	b.n	80016fc <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80016ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001738 <HAL_RCC_OscConfig+0x330>)
 80016cc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80016ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001738 <HAL_RCC_OscConfig+0x330>)
 80016d0:	2101      	movs	r1, #1
 80016d2:	438a      	bics	r2, r1
 80016d4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d6:	f7ff f869 	bl	80007ac <HAL_GetTick>
 80016da:	0003      	movs	r3, r0
 80016dc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016e0:	f7ff f864 	bl	80007ac <HAL_GetTick>
 80016e4:	0002      	movs	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e1e4      	b.n	8001abc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016f2:	4b11      	ldr	r3, [pc, #68]	@ (8001738 <HAL_RCC_OscConfig+0x330>)
 80016f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016f6:	2202      	movs	r2, #2
 80016f8:	4013      	ands	r3, r2
 80016fa:	d1f1      	bne.n	80016e0 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2204      	movs	r2, #4
 8001702:	4013      	ands	r3, r2
 8001704:	d100      	bne.n	8001708 <HAL_RCC_OscConfig+0x300>
 8001706:	e0c7      	b.n	8001898 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001708:	231f      	movs	r3, #31
 800170a:	18fb      	adds	r3, r7, r3
 800170c:	2200      	movs	r2, #0
 800170e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001710:	4b09      	ldr	r3, [pc, #36]	@ (8001738 <HAL_RCC_OscConfig+0x330>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	2238      	movs	r2, #56	@ 0x38
 8001716:	4013      	ands	r3, r2
 8001718:	2b20      	cmp	r3, #32
 800171a:	d11f      	bne.n	800175c <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800171c:	4b06      	ldr	r3, [pc, #24]	@ (8001738 <HAL_RCC_OscConfig+0x330>)
 800171e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001720:	2202      	movs	r2, #2
 8001722:	4013      	ands	r3, r2
 8001724:	d100      	bne.n	8001728 <HAL_RCC_OscConfig+0x320>
 8001726:	e0b7      	b.n	8001898 <HAL_RCC_OscConfig+0x490>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d000      	beq.n	8001732 <HAL_RCC_OscConfig+0x32a>
 8001730:	e0b2      	b.n	8001898 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e1c2      	b.n	8001abc <HAL_RCC_OscConfig+0x6b4>
 8001736:	46c0      	nop			@ (mov r8, r8)
 8001738:	40021000 	.word	0x40021000
 800173c:	fffeffff 	.word	0xfffeffff
 8001740:	fffbffff 	.word	0xfffbffff
 8001744:	ffff80ff 	.word	0xffff80ff
 8001748:	ffffc7ff 	.word	0xffffc7ff
 800174c:	00f42400 	.word	0x00f42400
 8001750:	20000000 	.word	0x20000000
 8001754:	20000004 	.word	0x20000004
 8001758:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800175c:	4bb5      	ldr	r3, [pc, #724]	@ (8001a34 <HAL_RCC_OscConfig+0x62c>)
 800175e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001760:	2380      	movs	r3, #128	@ 0x80
 8001762:	055b      	lsls	r3, r3, #21
 8001764:	4013      	ands	r3, r2
 8001766:	d101      	bne.n	800176c <HAL_RCC_OscConfig+0x364>
 8001768:	2301      	movs	r3, #1
 800176a:	e000      	b.n	800176e <HAL_RCC_OscConfig+0x366>
 800176c:	2300      	movs	r3, #0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d011      	beq.n	8001796 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001772:	4bb0      	ldr	r3, [pc, #704]	@ (8001a34 <HAL_RCC_OscConfig+0x62c>)
 8001774:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001776:	4baf      	ldr	r3, [pc, #700]	@ (8001a34 <HAL_RCC_OscConfig+0x62c>)
 8001778:	2180      	movs	r1, #128	@ 0x80
 800177a:	0549      	lsls	r1, r1, #21
 800177c:	430a      	orrs	r2, r1
 800177e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001780:	4bac      	ldr	r3, [pc, #688]	@ (8001a34 <HAL_RCC_OscConfig+0x62c>)
 8001782:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001784:	2380      	movs	r3, #128	@ 0x80
 8001786:	055b      	lsls	r3, r3, #21
 8001788:	4013      	ands	r3, r2
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800178e:	231f      	movs	r3, #31
 8001790:	18fb      	adds	r3, r7, r3
 8001792:	2201      	movs	r2, #1
 8001794:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001796:	4ba8      	ldr	r3, [pc, #672]	@ (8001a38 <HAL_RCC_OscConfig+0x630>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	2380      	movs	r3, #128	@ 0x80
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	4013      	ands	r3, r2
 80017a0:	d11a      	bne.n	80017d8 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017a2:	4ba5      	ldr	r3, [pc, #660]	@ (8001a38 <HAL_RCC_OscConfig+0x630>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	4ba4      	ldr	r3, [pc, #656]	@ (8001a38 <HAL_RCC_OscConfig+0x630>)
 80017a8:	2180      	movs	r1, #128	@ 0x80
 80017aa:	0049      	lsls	r1, r1, #1
 80017ac:	430a      	orrs	r2, r1
 80017ae:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80017b0:	f7fe fffc 	bl	80007ac <HAL_GetTick>
 80017b4:	0003      	movs	r3, r0
 80017b6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017ba:	f7fe fff7 	bl	80007ac <HAL_GetTick>
 80017be:	0002      	movs	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e177      	b.n	8001abc <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017cc:	4b9a      	ldr	r3, [pc, #616]	@ (8001a38 <HAL_RCC_OscConfig+0x630>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	2380      	movs	r3, #128	@ 0x80
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	4013      	ands	r3, r2
 80017d6:	d0f0      	beq.n	80017ba <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d106      	bne.n	80017ee <HAL_RCC_OscConfig+0x3e6>
 80017e0:	4b94      	ldr	r3, [pc, #592]	@ (8001a34 <HAL_RCC_OscConfig+0x62c>)
 80017e2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80017e4:	4b93      	ldr	r3, [pc, #588]	@ (8001a34 <HAL_RCC_OscConfig+0x62c>)
 80017e6:	2101      	movs	r1, #1
 80017e8:	430a      	orrs	r2, r1
 80017ea:	65da      	str	r2, [r3, #92]	@ 0x5c
 80017ec:	e01c      	b.n	8001828 <HAL_RCC_OscConfig+0x420>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	2b05      	cmp	r3, #5
 80017f4:	d10c      	bne.n	8001810 <HAL_RCC_OscConfig+0x408>
 80017f6:	4b8f      	ldr	r3, [pc, #572]	@ (8001a34 <HAL_RCC_OscConfig+0x62c>)
 80017f8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80017fa:	4b8e      	ldr	r3, [pc, #568]	@ (8001a34 <HAL_RCC_OscConfig+0x62c>)
 80017fc:	2104      	movs	r1, #4
 80017fe:	430a      	orrs	r2, r1
 8001800:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001802:	4b8c      	ldr	r3, [pc, #560]	@ (8001a34 <HAL_RCC_OscConfig+0x62c>)
 8001804:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001806:	4b8b      	ldr	r3, [pc, #556]	@ (8001a34 <HAL_RCC_OscConfig+0x62c>)
 8001808:	2101      	movs	r1, #1
 800180a:	430a      	orrs	r2, r1
 800180c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800180e:	e00b      	b.n	8001828 <HAL_RCC_OscConfig+0x420>
 8001810:	4b88      	ldr	r3, [pc, #544]	@ (8001a34 <HAL_RCC_OscConfig+0x62c>)
 8001812:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001814:	4b87      	ldr	r3, [pc, #540]	@ (8001a34 <HAL_RCC_OscConfig+0x62c>)
 8001816:	2101      	movs	r1, #1
 8001818:	438a      	bics	r2, r1
 800181a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800181c:	4b85      	ldr	r3, [pc, #532]	@ (8001a34 <HAL_RCC_OscConfig+0x62c>)
 800181e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001820:	4b84      	ldr	r3, [pc, #528]	@ (8001a34 <HAL_RCC_OscConfig+0x62c>)
 8001822:	2104      	movs	r1, #4
 8001824:	438a      	bics	r2, r1
 8001826:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d014      	beq.n	800185a <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001830:	f7fe ffbc 	bl	80007ac <HAL_GetTick>
 8001834:	0003      	movs	r3, r0
 8001836:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001838:	e009      	b.n	800184e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800183a:	f7fe ffb7 	bl	80007ac <HAL_GetTick>
 800183e:	0002      	movs	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	4a7d      	ldr	r2, [pc, #500]	@ (8001a3c <HAL_RCC_OscConfig+0x634>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e136      	b.n	8001abc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800184e:	4b79      	ldr	r3, [pc, #484]	@ (8001a34 <HAL_RCC_OscConfig+0x62c>)
 8001850:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001852:	2202      	movs	r2, #2
 8001854:	4013      	ands	r3, r2
 8001856:	d0f0      	beq.n	800183a <HAL_RCC_OscConfig+0x432>
 8001858:	e013      	b.n	8001882 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185a:	f7fe ffa7 	bl	80007ac <HAL_GetTick>
 800185e:	0003      	movs	r3, r0
 8001860:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001862:	e009      	b.n	8001878 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001864:	f7fe ffa2 	bl	80007ac <HAL_GetTick>
 8001868:	0002      	movs	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	4a73      	ldr	r2, [pc, #460]	@ (8001a3c <HAL_RCC_OscConfig+0x634>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e121      	b.n	8001abc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001878:	4b6e      	ldr	r3, [pc, #440]	@ (8001a34 <HAL_RCC_OscConfig+0x62c>)
 800187a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800187c:	2202      	movs	r2, #2
 800187e:	4013      	ands	r3, r2
 8001880:	d1f0      	bne.n	8001864 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001882:	231f      	movs	r3, #31
 8001884:	18fb      	adds	r3, r7, r3
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d105      	bne.n	8001898 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800188c:	4b69      	ldr	r3, [pc, #420]	@ (8001a34 <HAL_RCC_OscConfig+0x62c>)
 800188e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001890:	4b68      	ldr	r3, [pc, #416]	@ (8001a34 <HAL_RCC_OscConfig+0x62c>)
 8001892:	496b      	ldr	r1, [pc, #428]	@ (8001a40 <HAL_RCC_OscConfig+0x638>)
 8001894:	400a      	ands	r2, r1
 8001896:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2220      	movs	r2, #32
 800189e:	4013      	ands	r3, r2
 80018a0:	d039      	beq.n	8001916 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d01b      	beq.n	80018e2 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018aa:	4b62      	ldr	r3, [pc, #392]	@ (8001a34 <HAL_RCC_OscConfig+0x62c>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	4b61      	ldr	r3, [pc, #388]	@ (8001a34 <HAL_RCC_OscConfig+0x62c>)
 80018b0:	2180      	movs	r1, #128	@ 0x80
 80018b2:	03c9      	lsls	r1, r1, #15
 80018b4:	430a      	orrs	r2, r1
 80018b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b8:	f7fe ff78 	bl	80007ac <HAL_GetTick>
 80018bc:	0003      	movs	r3, r0
 80018be:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018c2:	f7fe ff73 	bl	80007ac <HAL_GetTick>
 80018c6:	0002      	movs	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e0f3      	b.n	8001abc <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80018d4:	4b57      	ldr	r3, [pc, #348]	@ (8001a34 <HAL_RCC_OscConfig+0x62c>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	2380      	movs	r3, #128	@ 0x80
 80018da:	041b      	lsls	r3, r3, #16
 80018dc:	4013      	ands	r3, r2
 80018de:	d0f0      	beq.n	80018c2 <HAL_RCC_OscConfig+0x4ba>
 80018e0:	e019      	b.n	8001916 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018e2:	4b54      	ldr	r3, [pc, #336]	@ (8001a34 <HAL_RCC_OscConfig+0x62c>)
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	4b53      	ldr	r3, [pc, #332]	@ (8001a34 <HAL_RCC_OscConfig+0x62c>)
 80018e8:	4956      	ldr	r1, [pc, #344]	@ (8001a44 <HAL_RCC_OscConfig+0x63c>)
 80018ea:	400a      	ands	r2, r1
 80018ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ee:	f7fe ff5d 	bl	80007ac <HAL_GetTick>
 80018f2:	0003      	movs	r3, r0
 80018f4:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018f8:	f7fe ff58 	bl	80007ac <HAL_GetTick>
 80018fc:	0002      	movs	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e0d8      	b.n	8001abc <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800190a:	4b4a      	ldr	r3, [pc, #296]	@ (8001a34 <HAL_RCC_OscConfig+0x62c>)
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	2380      	movs	r3, #128	@ 0x80
 8001910:	041b      	lsls	r3, r3, #16
 8001912:	4013      	ands	r3, r2
 8001914:	d1f0      	bne.n	80018f8 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a1b      	ldr	r3, [r3, #32]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d100      	bne.n	8001920 <HAL_RCC_OscConfig+0x518>
 800191e:	e0cc      	b.n	8001aba <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001920:	4b44      	ldr	r3, [pc, #272]	@ (8001a34 <HAL_RCC_OscConfig+0x62c>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	2238      	movs	r2, #56	@ 0x38
 8001926:	4013      	ands	r3, r2
 8001928:	2b10      	cmp	r3, #16
 800192a:	d100      	bne.n	800192e <HAL_RCC_OscConfig+0x526>
 800192c:	e07b      	b.n	8001a26 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a1b      	ldr	r3, [r3, #32]
 8001932:	2b02      	cmp	r3, #2
 8001934:	d156      	bne.n	80019e4 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001936:	4b3f      	ldr	r3, [pc, #252]	@ (8001a34 <HAL_RCC_OscConfig+0x62c>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	4b3e      	ldr	r3, [pc, #248]	@ (8001a34 <HAL_RCC_OscConfig+0x62c>)
 800193c:	4942      	ldr	r1, [pc, #264]	@ (8001a48 <HAL_RCC_OscConfig+0x640>)
 800193e:	400a      	ands	r2, r1
 8001940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001942:	f7fe ff33 	bl	80007ac <HAL_GetTick>
 8001946:	0003      	movs	r3, r0
 8001948:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800194c:	f7fe ff2e 	bl	80007ac <HAL_GetTick>
 8001950:	0002      	movs	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e0ae      	b.n	8001abc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800195e:	4b35      	ldr	r3, [pc, #212]	@ (8001a34 <HAL_RCC_OscConfig+0x62c>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	2380      	movs	r3, #128	@ 0x80
 8001964:	049b      	lsls	r3, r3, #18
 8001966:	4013      	ands	r3, r2
 8001968:	d1f0      	bne.n	800194c <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800196a:	4b32      	ldr	r3, [pc, #200]	@ (8001a34 <HAL_RCC_OscConfig+0x62c>)
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	4a37      	ldr	r2, [pc, #220]	@ (8001a4c <HAL_RCC_OscConfig+0x644>)
 8001970:	4013      	ands	r3, r2
 8001972:	0019      	movs	r1, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800197c:	431a      	orrs	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001982:	021b      	lsls	r3, r3, #8
 8001984:	431a      	orrs	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198a:	431a      	orrs	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001990:	431a      	orrs	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001996:	431a      	orrs	r2, r3
 8001998:	4b26      	ldr	r3, [pc, #152]	@ (8001a34 <HAL_RCC_OscConfig+0x62c>)
 800199a:	430a      	orrs	r2, r1
 800199c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800199e:	4b25      	ldr	r3, [pc, #148]	@ (8001a34 <HAL_RCC_OscConfig+0x62c>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	4b24      	ldr	r3, [pc, #144]	@ (8001a34 <HAL_RCC_OscConfig+0x62c>)
 80019a4:	2180      	movs	r1, #128	@ 0x80
 80019a6:	0449      	lsls	r1, r1, #17
 80019a8:	430a      	orrs	r2, r1
 80019aa:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80019ac:	4b21      	ldr	r3, [pc, #132]	@ (8001a34 <HAL_RCC_OscConfig+0x62c>)
 80019ae:	68da      	ldr	r2, [r3, #12]
 80019b0:	4b20      	ldr	r3, [pc, #128]	@ (8001a34 <HAL_RCC_OscConfig+0x62c>)
 80019b2:	2180      	movs	r1, #128	@ 0x80
 80019b4:	0549      	lsls	r1, r1, #21
 80019b6:	430a      	orrs	r2, r1
 80019b8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ba:	f7fe fef7 	bl	80007ac <HAL_GetTick>
 80019be:	0003      	movs	r3, r0
 80019c0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c4:	f7fe fef2 	bl	80007ac <HAL_GetTick>
 80019c8:	0002      	movs	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e072      	b.n	8001abc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019d6:	4b17      	ldr	r3, [pc, #92]	@ (8001a34 <HAL_RCC_OscConfig+0x62c>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	2380      	movs	r3, #128	@ 0x80
 80019dc:	049b      	lsls	r3, r3, #18
 80019de:	4013      	ands	r3, r2
 80019e0:	d0f0      	beq.n	80019c4 <HAL_RCC_OscConfig+0x5bc>
 80019e2:	e06a      	b.n	8001aba <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e4:	4b13      	ldr	r3, [pc, #76]	@ (8001a34 <HAL_RCC_OscConfig+0x62c>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	4b12      	ldr	r3, [pc, #72]	@ (8001a34 <HAL_RCC_OscConfig+0x62c>)
 80019ea:	4917      	ldr	r1, [pc, #92]	@ (8001a48 <HAL_RCC_OscConfig+0x640>)
 80019ec:	400a      	ands	r2, r1
 80019ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f0:	f7fe fedc 	bl	80007ac <HAL_GetTick>
 80019f4:	0003      	movs	r3, r0
 80019f6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019fa:	f7fe fed7 	bl	80007ac <HAL_GetTick>
 80019fe:	0002      	movs	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e057      	b.n	8001abc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a0c:	4b09      	ldr	r3, [pc, #36]	@ (8001a34 <HAL_RCC_OscConfig+0x62c>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	2380      	movs	r3, #128	@ 0x80
 8001a12:	049b      	lsls	r3, r3, #18
 8001a14:	4013      	ands	r3, r2
 8001a16:	d1f0      	bne.n	80019fa <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001a18:	4b06      	ldr	r3, [pc, #24]	@ (8001a34 <HAL_RCC_OscConfig+0x62c>)
 8001a1a:	68da      	ldr	r2, [r3, #12]
 8001a1c:	4b05      	ldr	r3, [pc, #20]	@ (8001a34 <HAL_RCC_OscConfig+0x62c>)
 8001a1e:	490c      	ldr	r1, [pc, #48]	@ (8001a50 <HAL_RCC_OscConfig+0x648>)
 8001a20:	400a      	ands	r2, r1
 8001a22:	60da      	str	r2, [r3, #12]
 8001a24:	e049      	b.n	8001aba <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a1b      	ldr	r3, [r3, #32]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d112      	bne.n	8001a54 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e044      	b.n	8001abc <HAL_RCC_OscConfig+0x6b4>
 8001a32:	46c0      	nop			@ (mov r8, r8)
 8001a34:	40021000 	.word	0x40021000
 8001a38:	40007000 	.word	0x40007000
 8001a3c:	00001388 	.word	0x00001388
 8001a40:	efffffff 	.word	0xefffffff
 8001a44:	ffbfffff 	.word	0xffbfffff
 8001a48:	feffffff 	.word	0xfeffffff
 8001a4c:	11c1808c 	.word	0x11c1808c
 8001a50:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001a54:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac4 <HAL_RCC_OscConfig+0x6bc>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	2203      	movs	r2, #3
 8001a5e:	401a      	ands	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d126      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	2270      	movs	r2, #112	@ 0x70
 8001a6c:	401a      	ands	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d11f      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a76:	697a      	ldr	r2, [r7, #20]
 8001a78:	23fe      	movs	r3, #254	@ 0xfe
 8001a7a:	01db      	lsls	r3, r3, #7
 8001a7c:	401a      	ands	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a82:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d116      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a88:	697a      	ldr	r2, [r7, #20]
 8001a8a:	23f8      	movs	r3, #248	@ 0xf8
 8001a8c:	039b      	lsls	r3, r3, #14
 8001a8e:	401a      	ands	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d10e      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001a98:	697a      	ldr	r2, [r7, #20]
 8001a9a:	23e0      	movs	r3, #224	@ 0xe0
 8001a9c:	051b      	lsls	r3, r3, #20
 8001a9e:	401a      	ands	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d106      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	0f5b      	lsrs	r3, r3, #29
 8001aac:	075a      	lsls	r2, r3, #29
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d001      	beq.n	8001aba <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e000      	b.n	8001abc <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	0018      	movs	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	b008      	add	sp, #32
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40021000 	.word	0x40021000

08001ac8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d101      	bne.n	8001adc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e0e9      	b.n	8001cb0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001adc:	4b76      	ldr	r3, [pc, #472]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2207      	movs	r2, #7
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d91e      	bls.n	8001b28 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aea:	4b73      	ldr	r3, [pc, #460]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2207      	movs	r2, #7
 8001af0:	4393      	bics	r3, r2
 8001af2:	0019      	movs	r1, r3
 8001af4:	4b70      	ldr	r3, [pc, #448]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	430a      	orrs	r2, r1
 8001afa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001afc:	f7fe fe56 	bl	80007ac <HAL_GetTick>
 8001b00:	0003      	movs	r3, r0
 8001b02:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b04:	e009      	b.n	8001b1a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b06:	f7fe fe51 	bl	80007ac <HAL_GetTick>
 8001b0a:	0002      	movs	r2, r0
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	4a6a      	ldr	r2, [pc, #424]	@ (8001cbc <HAL_RCC_ClockConfig+0x1f4>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e0ca      	b.n	8001cb0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b1a:	4b67      	ldr	r3, [pc, #412]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2207      	movs	r2, #7
 8001b20:	4013      	ands	r3, r2
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d1ee      	bne.n	8001b06 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d015      	beq.n	8001b5e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2204      	movs	r2, #4
 8001b38:	4013      	ands	r3, r2
 8001b3a:	d006      	beq.n	8001b4a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001b3c:	4b60      	ldr	r3, [pc, #384]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1f8>)
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	4b5f      	ldr	r3, [pc, #380]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1f8>)
 8001b42:	21e0      	movs	r1, #224	@ 0xe0
 8001b44:	01c9      	lsls	r1, r1, #7
 8001b46:	430a      	orrs	r2, r1
 8001b48:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b4a:	4b5d      	ldr	r3, [pc, #372]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1f8>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	4a5d      	ldr	r2, [pc, #372]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1fc>)
 8001b50:	4013      	ands	r3, r2
 8001b52:	0019      	movs	r1, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	4b59      	ldr	r3, [pc, #356]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1f8>)
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2201      	movs	r2, #1
 8001b64:	4013      	ands	r3, r2
 8001b66:	d057      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d107      	bne.n	8001b80 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b70:	4b53      	ldr	r3, [pc, #332]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1f8>)
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	2380      	movs	r3, #128	@ 0x80
 8001b76:	029b      	lsls	r3, r3, #10
 8001b78:	4013      	ands	r3, r2
 8001b7a:	d12b      	bne.n	8001bd4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e097      	b.n	8001cb0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d107      	bne.n	8001b98 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b88:	4b4d      	ldr	r3, [pc, #308]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1f8>)
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	2380      	movs	r3, #128	@ 0x80
 8001b8e:	049b      	lsls	r3, r3, #18
 8001b90:	4013      	ands	r3, r2
 8001b92:	d11f      	bne.n	8001bd4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e08b      	b.n	8001cb0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d107      	bne.n	8001bb0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ba0:	4b47      	ldr	r3, [pc, #284]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1f8>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	2380      	movs	r3, #128	@ 0x80
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	4013      	ands	r3, r2
 8001baa:	d113      	bne.n	8001bd4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e07f      	b.n	8001cb0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	2b03      	cmp	r3, #3
 8001bb6:	d106      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bb8:	4b41      	ldr	r3, [pc, #260]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1f8>)
 8001bba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	d108      	bne.n	8001bd4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e074      	b.n	8001cb0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bc6:	4b3e      	ldr	r3, [pc, #248]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1f8>)
 8001bc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bca:	2202      	movs	r2, #2
 8001bcc:	4013      	ands	r3, r2
 8001bce:	d101      	bne.n	8001bd4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e06d      	b.n	8001cb0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bd4:	4b3a      	ldr	r3, [pc, #232]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1f8>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	2207      	movs	r2, #7
 8001bda:	4393      	bics	r3, r2
 8001bdc:	0019      	movs	r1, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685a      	ldr	r2, [r3, #4]
 8001be2:	4b37      	ldr	r3, [pc, #220]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1f8>)
 8001be4:	430a      	orrs	r2, r1
 8001be6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001be8:	f7fe fde0 	bl	80007ac <HAL_GetTick>
 8001bec:	0003      	movs	r3, r0
 8001bee:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf0:	e009      	b.n	8001c06 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf2:	f7fe fddb 	bl	80007ac <HAL_GetTick>
 8001bf6:	0002      	movs	r2, r0
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	4a2f      	ldr	r2, [pc, #188]	@ (8001cbc <HAL_RCC_ClockConfig+0x1f4>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e054      	b.n	8001cb0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c06:	4b2e      	ldr	r3, [pc, #184]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1f8>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	2238      	movs	r2, #56	@ 0x38
 8001c0c:	401a      	ands	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d1ec      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c18:	4b27      	ldr	r3, [pc, #156]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2207      	movs	r2, #7
 8001c1e:	4013      	ands	r3, r2
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d21e      	bcs.n	8001c64 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c26:	4b24      	ldr	r3, [pc, #144]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2207      	movs	r2, #7
 8001c2c:	4393      	bics	r3, r2
 8001c2e:	0019      	movs	r1, r3
 8001c30:	4b21      	ldr	r3, [pc, #132]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	430a      	orrs	r2, r1
 8001c36:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c38:	f7fe fdb8 	bl	80007ac <HAL_GetTick>
 8001c3c:	0003      	movs	r3, r0
 8001c3e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c40:	e009      	b.n	8001c56 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c42:	f7fe fdb3 	bl	80007ac <HAL_GetTick>
 8001c46:	0002      	movs	r2, r0
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	4a1b      	ldr	r2, [pc, #108]	@ (8001cbc <HAL_RCC_ClockConfig+0x1f4>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e02c      	b.n	8001cb0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c56:	4b18      	ldr	r3, [pc, #96]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2207      	movs	r2, #7
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	683a      	ldr	r2, [r7, #0]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d1ee      	bne.n	8001c42 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2204      	movs	r2, #4
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	d009      	beq.n	8001c82 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c6e:	4b14      	ldr	r3, [pc, #80]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1f8>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	4a15      	ldr	r2, [pc, #84]	@ (8001cc8 <HAL_RCC_ClockConfig+0x200>)
 8001c74:	4013      	ands	r3, r2
 8001c76:	0019      	movs	r1, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68da      	ldr	r2, [r3, #12]
 8001c7c:	4b10      	ldr	r3, [pc, #64]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1f8>)
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001c82:	f000 f829 	bl	8001cd8 <HAL_RCC_GetSysClockFreq>
 8001c86:	0001      	movs	r1, r0
 8001c88:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1f8>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	0a1b      	lsrs	r3, r3, #8
 8001c8e:	220f      	movs	r2, #15
 8001c90:	401a      	ands	r2, r3
 8001c92:	4b0e      	ldr	r3, [pc, #56]	@ (8001ccc <HAL_RCC_ClockConfig+0x204>)
 8001c94:	0092      	lsls	r2, r2, #2
 8001c96:	58d3      	ldr	r3, [r2, r3]
 8001c98:	221f      	movs	r2, #31
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	000a      	movs	r2, r1
 8001c9e:	40da      	lsrs	r2, r3
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd0 <HAL_RCC_ClockConfig+0x208>)
 8001ca2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd4 <HAL_RCC_ClockConfig+0x20c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	0018      	movs	r0, r3
 8001caa:	f7fe fd23 	bl	80006f4 <HAL_InitTick>
 8001cae:	0003      	movs	r3, r0
}
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	b004      	add	sp, #16
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40022000 	.word	0x40022000
 8001cbc:	00001388 	.word	0x00001388
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	fffff0ff 	.word	0xfffff0ff
 8001cc8:	ffff8fff 	.word	0xffff8fff
 8001ccc:	080022c4 	.word	0x080022c4
 8001cd0:	20000000 	.word	0x20000000
 8001cd4:	20000004 	.word	0x20000004

08001cd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cde:	4b3c      	ldr	r3, [pc, #240]	@ (8001dd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	2238      	movs	r2, #56	@ 0x38
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d10f      	bne.n	8001d08 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001ce8:	4b39      	ldr	r3, [pc, #228]	@ (8001dd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	0adb      	lsrs	r3, r3, #11
 8001cee:	2207      	movs	r2, #7
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	409a      	lsls	r2, r3
 8001cf6:	0013      	movs	r3, r2
 8001cf8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001cfa:	6839      	ldr	r1, [r7, #0]
 8001cfc:	4835      	ldr	r0, [pc, #212]	@ (8001dd4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001cfe:	f7fe fa01 	bl	8000104 <__udivsi3>
 8001d02:	0003      	movs	r3, r0
 8001d04:	613b      	str	r3, [r7, #16]
 8001d06:	e05d      	b.n	8001dc4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d08:	4b31      	ldr	r3, [pc, #196]	@ (8001dd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	2238      	movs	r2, #56	@ 0x38
 8001d0e:	4013      	ands	r3, r2
 8001d10:	2b08      	cmp	r3, #8
 8001d12:	d102      	bne.n	8001d1a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d14:	4b30      	ldr	r3, [pc, #192]	@ (8001dd8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001d16:	613b      	str	r3, [r7, #16]
 8001d18:	e054      	b.n	8001dc4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d1a:	4b2d      	ldr	r3, [pc, #180]	@ (8001dd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	2238      	movs	r2, #56	@ 0x38
 8001d20:	4013      	ands	r3, r2
 8001d22:	2b10      	cmp	r3, #16
 8001d24:	d138      	bne.n	8001d98 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001d26:	4b2a      	ldr	r3, [pc, #168]	@ (8001dd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d30:	4b27      	ldr	r3, [pc, #156]	@ (8001dd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	091b      	lsrs	r3, r3, #4
 8001d36:	2207      	movs	r2, #7
 8001d38:	4013      	ands	r3, r2
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2b03      	cmp	r3, #3
 8001d42:	d10d      	bne.n	8001d60 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d44:	68b9      	ldr	r1, [r7, #8]
 8001d46:	4824      	ldr	r0, [pc, #144]	@ (8001dd8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001d48:	f7fe f9dc 	bl	8000104 <__udivsi3>
 8001d4c:	0003      	movs	r3, r0
 8001d4e:	0019      	movs	r1, r3
 8001d50:	4b1f      	ldr	r3, [pc, #124]	@ (8001dd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	0a1b      	lsrs	r3, r3, #8
 8001d56:	227f      	movs	r2, #127	@ 0x7f
 8001d58:	4013      	ands	r3, r2
 8001d5a:	434b      	muls	r3, r1
 8001d5c:	617b      	str	r3, [r7, #20]
        break;
 8001d5e:	e00d      	b.n	8001d7c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001d60:	68b9      	ldr	r1, [r7, #8]
 8001d62:	481c      	ldr	r0, [pc, #112]	@ (8001dd4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001d64:	f7fe f9ce 	bl	8000104 <__udivsi3>
 8001d68:	0003      	movs	r3, r0
 8001d6a:	0019      	movs	r1, r3
 8001d6c:	4b18      	ldr	r3, [pc, #96]	@ (8001dd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	0a1b      	lsrs	r3, r3, #8
 8001d72:	227f      	movs	r2, #127	@ 0x7f
 8001d74:	4013      	ands	r3, r2
 8001d76:	434b      	muls	r3, r1
 8001d78:	617b      	str	r3, [r7, #20]
        break;
 8001d7a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001d7c:	4b14      	ldr	r3, [pc, #80]	@ (8001dd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	0f5b      	lsrs	r3, r3, #29
 8001d82:	2207      	movs	r2, #7
 8001d84:	4013      	ands	r3, r2
 8001d86:	3301      	adds	r3, #1
 8001d88:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001d8a:	6879      	ldr	r1, [r7, #4]
 8001d8c:	6978      	ldr	r0, [r7, #20]
 8001d8e:	f7fe f9b9 	bl	8000104 <__udivsi3>
 8001d92:	0003      	movs	r3, r0
 8001d94:	613b      	str	r3, [r7, #16]
 8001d96:	e015      	b.n	8001dc4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001d98:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	2238      	movs	r2, #56	@ 0x38
 8001d9e:	4013      	ands	r3, r2
 8001da0:	2b20      	cmp	r3, #32
 8001da2:	d103      	bne.n	8001dac <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001da4:	2380      	movs	r3, #128	@ 0x80
 8001da6:	021b      	lsls	r3, r3, #8
 8001da8:	613b      	str	r3, [r7, #16]
 8001daa:	e00b      	b.n	8001dc4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001dac:	4b08      	ldr	r3, [pc, #32]	@ (8001dd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	2238      	movs	r2, #56	@ 0x38
 8001db2:	4013      	ands	r3, r2
 8001db4:	2b18      	cmp	r3, #24
 8001db6:	d103      	bne.n	8001dc0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001db8:	23fa      	movs	r3, #250	@ 0xfa
 8001dba:	01db      	lsls	r3, r3, #7
 8001dbc:	613b      	str	r3, [r7, #16]
 8001dbe:	e001      	b.n	8001dc4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001dc4:	693b      	ldr	r3, [r7, #16]
}
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	b006      	add	sp, #24
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	46c0      	nop			@ (mov r8, r8)
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	00f42400 	.word	0x00f42400
 8001dd8:	007a1200 	.word	0x007a1200

08001ddc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001de4:	2313      	movs	r3, #19
 8001de6:	18fb      	adds	r3, r7, r3
 8001de8:	2200      	movs	r2, #0
 8001dea:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001dec:	2312      	movs	r3, #18
 8001dee:	18fb      	adds	r3, r7, r3
 8001df0:	2200      	movs	r2, #0
 8001df2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	2380      	movs	r3, #128	@ 0x80
 8001dfa:	029b      	lsls	r3, r3, #10
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	d100      	bne.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001e00:	e0ad      	b.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e02:	2011      	movs	r0, #17
 8001e04:	183b      	adds	r3, r7, r0
 8001e06:	2200      	movs	r2, #0
 8001e08:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e0a:	4b47      	ldr	r3, [pc, #284]	@ (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e0e:	2380      	movs	r3, #128	@ 0x80
 8001e10:	055b      	lsls	r3, r3, #21
 8001e12:	4013      	ands	r3, r2
 8001e14:	d110      	bne.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e16:	4b44      	ldr	r3, [pc, #272]	@ (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e1a:	4b43      	ldr	r3, [pc, #268]	@ (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e1c:	2180      	movs	r1, #128	@ 0x80
 8001e1e:	0549      	lsls	r1, r1, #21
 8001e20:	430a      	orrs	r2, r1
 8001e22:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001e24:	4b40      	ldr	r3, [pc, #256]	@ (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e28:	2380      	movs	r3, #128	@ 0x80
 8001e2a:	055b      	lsls	r3, r3, #21
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	60bb      	str	r3, [r7, #8]
 8001e30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e32:	183b      	adds	r3, r7, r0
 8001e34:	2201      	movs	r2, #1
 8001e36:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e38:	4b3c      	ldr	r3, [pc, #240]	@ (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	4b3b      	ldr	r3, [pc, #236]	@ (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001e3e:	2180      	movs	r1, #128	@ 0x80
 8001e40:	0049      	lsls	r1, r1, #1
 8001e42:	430a      	orrs	r2, r1
 8001e44:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e46:	f7fe fcb1 	bl	80007ac <HAL_GetTick>
 8001e4a:	0003      	movs	r3, r0
 8001e4c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e4e:	e00b      	b.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e50:	f7fe fcac 	bl	80007ac <HAL_GetTick>
 8001e54:	0002      	movs	r2, r0
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d904      	bls.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001e5e:	2313      	movs	r3, #19
 8001e60:	18fb      	adds	r3, r7, r3
 8001e62:	2203      	movs	r2, #3
 8001e64:	701a      	strb	r2, [r3, #0]
        break;
 8001e66:	e005      	b.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e68:	4b30      	ldr	r3, [pc, #192]	@ (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	2380      	movs	r3, #128	@ 0x80
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	4013      	ands	r3, r2
 8001e72:	d0ed      	beq.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001e74:	2313      	movs	r3, #19
 8001e76:	18fb      	adds	r3, r7, r3
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d15e      	bne.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e7e:	4b2a      	ldr	r3, [pc, #168]	@ (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e80:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e82:	23c0      	movs	r3, #192	@ 0xc0
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	4013      	ands	r3, r2
 8001e88:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d019      	beq.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e94:	697a      	ldr	r2, [r7, #20]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d014      	beq.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e9a:	4b23      	ldr	r3, [pc, #140]	@ (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e9e:	4a24      	ldr	r2, [pc, #144]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001ea4:	4b20      	ldr	r3, [pc, #128]	@ (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001ea6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001ea8:	4b1f      	ldr	r3, [pc, #124]	@ (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001eaa:	2180      	movs	r1, #128	@ 0x80
 8001eac:	0249      	lsls	r1, r1, #9
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001eb2:	4b1d      	ldr	r3, [pc, #116]	@ (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001eb4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001eb6:	4b1c      	ldr	r3, [pc, #112]	@ (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001eb8:	491e      	ldr	r1, [pc, #120]	@ (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8001eba:	400a      	ands	r2, r1
 8001ebc:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001ebe:	4b1a      	ldr	r3, [pc, #104]	@ (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001ec0:	697a      	ldr	r2, [r7, #20]
 8001ec2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	4013      	ands	r3, r2
 8001eca:	d016      	beq.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ecc:	f7fe fc6e 	bl	80007ac <HAL_GetTick>
 8001ed0:	0003      	movs	r3, r0
 8001ed2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ed4:	e00c      	b.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ed6:	f7fe fc69 	bl	80007ac <HAL_GetTick>
 8001eda:	0002      	movs	r2, r0
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	4a15      	ldr	r2, [pc, #84]	@ (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d904      	bls.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001ee6:	2313      	movs	r3, #19
 8001ee8:	18fb      	adds	r3, r7, r3
 8001eea:	2203      	movs	r2, #3
 8001eec:	701a      	strb	r2, [r3, #0]
            break;
 8001eee:	e004      	b.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ef0:	4b0d      	ldr	r3, [pc, #52]	@ (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001ef2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d0ed      	beq.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001efa:	2313      	movs	r3, #19
 8001efc:	18fb      	adds	r3, r7, r3
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d10a      	bne.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f04:	4b08      	ldr	r3, [pc, #32]	@ (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001f06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f08:	4a09      	ldr	r2, [pc, #36]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	0019      	movs	r1, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f12:	4b05      	ldr	r3, [pc, #20]	@ (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001f14:	430a      	orrs	r2, r1
 8001f16:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001f18:	e016      	b.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f1a:	2312      	movs	r3, #18
 8001f1c:	18fb      	adds	r3, r7, r3
 8001f1e:	2213      	movs	r2, #19
 8001f20:	18ba      	adds	r2, r7, r2
 8001f22:	7812      	ldrb	r2, [r2, #0]
 8001f24:	701a      	strb	r2, [r3, #0]
 8001f26:	e00f      	b.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	40007000 	.word	0x40007000
 8001f30:	fffffcff 	.word	0xfffffcff
 8001f34:	fffeffff 	.word	0xfffeffff
 8001f38:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f3c:	2312      	movs	r3, #18
 8001f3e:	18fb      	adds	r3, r7, r3
 8001f40:	2213      	movs	r2, #19
 8001f42:	18ba      	adds	r2, r7, r2
 8001f44:	7812      	ldrb	r2, [r2, #0]
 8001f46:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f48:	2311      	movs	r3, #17
 8001f4a:	18fb      	adds	r3, r7, r3
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d105      	bne.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f52:	4bb6      	ldr	r3, [pc, #728]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f56:	4bb5      	ldr	r3, [pc, #724]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f58:	49b5      	ldr	r1, [pc, #724]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001f5a:	400a      	ands	r2, r1
 8001f5c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2201      	movs	r2, #1
 8001f64:	4013      	ands	r3, r2
 8001f66:	d009      	beq.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f68:	4bb0      	ldr	r3, [pc, #704]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f6c:	2203      	movs	r2, #3
 8001f6e:	4393      	bics	r3, r2
 8001f70:	0019      	movs	r1, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	4bad      	ldr	r3, [pc, #692]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2202      	movs	r2, #2
 8001f82:	4013      	ands	r3, r2
 8001f84:	d009      	beq.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f86:	4ba9      	ldr	r3, [pc, #676]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f8a:	220c      	movs	r2, #12
 8001f8c:	4393      	bics	r3, r2
 8001f8e:	0019      	movs	r1, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	4ba5      	ldr	r3, [pc, #660]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f96:	430a      	orrs	r2, r1
 8001f98:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2204      	movs	r2, #4
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	d009      	beq.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001fa4:	4ba1      	ldr	r3, [pc, #644]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fa8:	2230      	movs	r2, #48	@ 0x30
 8001faa:	4393      	bics	r3, r2
 8001fac:	0019      	movs	r1, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68da      	ldr	r2, [r3, #12]
 8001fb2:	4b9e      	ldr	r3, [pc, #632]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2210      	movs	r2, #16
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d009      	beq.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001fc2:	4b9a      	ldr	r3, [pc, #616]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fc6:	4a9b      	ldr	r2, [pc, #620]	@ (8002234 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001fc8:	4013      	ands	r3, r2
 8001fca:	0019      	movs	r1, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	691a      	ldr	r2, [r3, #16]
 8001fd0:	4b96      	ldr	r3, [pc, #600]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	2380      	movs	r3, #128	@ 0x80
 8001fdc:	015b      	lsls	r3, r3, #5
 8001fde:	4013      	ands	r3, r2
 8001fe0:	d009      	beq.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8001fe2:	4b92      	ldr	r3, [pc, #584]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fe6:	4a94      	ldr	r2, [pc, #592]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001fe8:	4013      	ands	r3, r2
 8001fea:	0019      	movs	r1, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	695a      	ldr	r2, [r3, #20]
 8001ff0:	4b8e      	ldr	r3, [pc, #568]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	2380      	movs	r3, #128	@ 0x80
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	4013      	ands	r3, r2
 8002000:	d009      	beq.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002002:	4b8a      	ldr	r3, [pc, #552]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002006:	4a8d      	ldr	r2, [pc, #564]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8002008:	4013      	ands	r3, r2
 800200a:	0019      	movs	r1, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002010:	4b86      	ldr	r3, [pc, #536]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002012:	430a      	orrs	r2, r1
 8002014:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	2380      	movs	r3, #128	@ 0x80
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	4013      	ands	r3, r2
 8002020:	d009      	beq.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002022:	4b82      	ldr	r3, [pc, #520]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002024:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002026:	4a86      	ldr	r2, [pc, #536]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8002028:	4013      	ands	r3, r2
 800202a:	0019      	movs	r1, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002030:	4b7e      	ldr	r3, [pc, #504]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002032:	430a      	orrs	r2, r1
 8002034:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2220      	movs	r2, #32
 800203c:	4013      	ands	r3, r2
 800203e:	d009      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002040:	4b7a      	ldr	r3, [pc, #488]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002044:	4a7f      	ldr	r2, [pc, #508]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002046:	4013      	ands	r3, r2
 8002048:	0019      	movs	r1, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	699a      	ldr	r2, [r3, #24]
 800204e:	4b77      	ldr	r3, [pc, #476]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002050:	430a      	orrs	r2, r1
 8002052:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2240      	movs	r2, #64	@ 0x40
 800205a:	4013      	ands	r3, r2
 800205c:	d009      	beq.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800205e:	4b73      	ldr	r3, [pc, #460]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002062:	4a79      	ldr	r2, [pc, #484]	@ (8002248 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002064:	4013      	ands	r3, r2
 8002066:	0019      	movs	r1, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	69da      	ldr	r2, [r3, #28]
 800206c:	4b6f      	ldr	r3, [pc, #444]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800206e:	430a      	orrs	r2, r1
 8002070:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	2380      	movs	r3, #128	@ 0x80
 8002078:	01db      	lsls	r3, r3, #7
 800207a:	4013      	ands	r3, r2
 800207c:	d015      	beq.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800207e:	4b6b      	ldr	r3, [pc, #428]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	0899      	lsrs	r1, r3, #2
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800208a:	4b68      	ldr	r3, [pc, #416]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800208c:	430a      	orrs	r2, r1
 800208e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002094:	2380      	movs	r3, #128	@ 0x80
 8002096:	05db      	lsls	r3, r3, #23
 8002098:	429a      	cmp	r2, r3
 800209a:	d106      	bne.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800209c:	4b63      	ldr	r3, [pc, #396]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800209e:	68da      	ldr	r2, [r3, #12]
 80020a0:	4b62      	ldr	r3, [pc, #392]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020a2:	2180      	movs	r1, #128	@ 0x80
 80020a4:	0249      	lsls	r1, r1, #9
 80020a6:	430a      	orrs	r2, r1
 80020a8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	2380      	movs	r3, #128	@ 0x80
 80020b0:	031b      	lsls	r3, r3, #12
 80020b2:	4013      	ands	r3, r2
 80020b4:	d009      	beq.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80020b6:	4b5d      	ldr	r3, [pc, #372]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ba:	2240      	movs	r2, #64	@ 0x40
 80020bc:	4393      	bics	r3, r2
 80020be:	0019      	movs	r1, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020c4:	4b59      	ldr	r3, [pc, #356]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020c6:	430a      	orrs	r2, r1
 80020c8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	2380      	movs	r3, #128	@ 0x80
 80020d0:	039b      	lsls	r3, r3, #14
 80020d2:	4013      	ands	r3, r2
 80020d4:	d016      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80020d6:	4b55      	ldr	r3, [pc, #340]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020da:	4a5c      	ldr	r2, [pc, #368]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80020dc:	4013      	ands	r3, r2
 80020de:	0019      	movs	r1, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80020e4:	4b51      	ldr	r3, [pc, #324]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020e6:	430a      	orrs	r2, r1
 80020e8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80020ee:	2380      	movs	r3, #128	@ 0x80
 80020f0:	03db      	lsls	r3, r3, #15
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d106      	bne.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80020f6:	4b4d      	ldr	r3, [pc, #308]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020f8:	68da      	ldr	r2, [r3, #12]
 80020fa:	4b4c      	ldr	r3, [pc, #304]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020fc:	2180      	movs	r1, #128	@ 0x80
 80020fe:	0449      	lsls	r1, r1, #17
 8002100:	430a      	orrs	r2, r1
 8002102:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	2380      	movs	r3, #128	@ 0x80
 800210a:	03db      	lsls	r3, r3, #15
 800210c:	4013      	ands	r3, r2
 800210e:	d016      	beq.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002110:	4b46      	ldr	r3, [pc, #280]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002112:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002114:	4a4e      	ldr	r2, [pc, #312]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002116:	4013      	ands	r3, r2
 8002118:	0019      	movs	r1, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800211e:	4b43      	ldr	r3, [pc, #268]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002120:	430a      	orrs	r2, r1
 8002122:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002128:	2380      	movs	r3, #128	@ 0x80
 800212a:	045b      	lsls	r3, r3, #17
 800212c:	429a      	cmp	r2, r3
 800212e:	d106      	bne.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002130:	4b3e      	ldr	r3, [pc, #248]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002132:	68da      	ldr	r2, [r3, #12]
 8002134:	4b3d      	ldr	r3, [pc, #244]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002136:	2180      	movs	r1, #128	@ 0x80
 8002138:	0449      	lsls	r1, r1, #17
 800213a:	430a      	orrs	r2, r1
 800213c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	2380      	movs	r3, #128	@ 0x80
 8002144:	011b      	lsls	r3, r3, #4
 8002146:	4013      	ands	r3, r2
 8002148:	d014      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800214a:	4b38      	ldr	r3, [pc, #224]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800214c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800214e:	2203      	movs	r2, #3
 8002150:	4393      	bics	r3, r2
 8002152:	0019      	movs	r1, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a1a      	ldr	r2, [r3, #32]
 8002158:	4b34      	ldr	r3, [pc, #208]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800215a:	430a      	orrs	r2, r1
 800215c:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a1b      	ldr	r3, [r3, #32]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d106      	bne.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002166:	4b31      	ldr	r3, [pc, #196]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002168:	68da      	ldr	r2, [r3, #12]
 800216a:	4b30      	ldr	r3, [pc, #192]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800216c:	2180      	movs	r1, #128	@ 0x80
 800216e:	0249      	lsls	r1, r1, #9
 8002170:	430a      	orrs	r2, r1
 8002172:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	2380      	movs	r3, #128	@ 0x80
 800217a:	019b      	lsls	r3, r3, #6
 800217c:	4013      	ands	r3, r2
 800217e:	d014      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002180:	4b2a      	ldr	r3, [pc, #168]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002184:	220c      	movs	r2, #12
 8002186:	4393      	bics	r3, r2
 8002188:	0019      	movs	r1, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800218e:	4b27      	ldr	r3, [pc, #156]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002190:	430a      	orrs	r2, r1
 8002192:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002198:	2b04      	cmp	r3, #4
 800219a:	d106      	bne.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800219c:	4b23      	ldr	r3, [pc, #140]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800219e:	68da      	ldr	r2, [r3, #12]
 80021a0:	4b22      	ldr	r3, [pc, #136]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021a2:	2180      	movs	r1, #128	@ 0x80
 80021a4:	0249      	lsls	r1, r1, #9
 80021a6:	430a      	orrs	r2, r1
 80021a8:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	2380      	movs	r3, #128	@ 0x80
 80021b0:	045b      	lsls	r3, r3, #17
 80021b2:	4013      	ands	r3, r2
 80021b4:	d016      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021b6:	4b1d      	ldr	r3, [pc, #116]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ba:	4a22      	ldr	r2, [pc, #136]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80021bc:	4013      	ands	r3, r2
 80021be:	0019      	movs	r1, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80021c4:	4b19      	ldr	r3, [pc, #100]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021c6:	430a      	orrs	r2, r1
 80021c8:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80021ce:	2380      	movs	r3, #128	@ 0x80
 80021d0:	019b      	lsls	r3, r3, #6
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d106      	bne.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80021d6:	4b15      	ldr	r3, [pc, #84]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021d8:	68da      	ldr	r2, [r3, #12]
 80021da:	4b14      	ldr	r3, [pc, #80]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021dc:	2180      	movs	r1, #128	@ 0x80
 80021de:	0449      	lsls	r1, r1, #17
 80021e0:	430a      	orrs	r2, r1
 80021e2:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	2380      	movs	r3, #128	@ 0x80
 80021ea:	049b      	lsls	r3, r3, #18
 80021ec:	4013      	ands	r3, r2
 80021ee:	d016      	beq.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80021f0:	4b0e      	ldr	r3, [pc, #56]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021f4:	4a10      	ldr	r2, [pc, #64]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80021f6:	4013      	ands	r3, r2
 80021f8:	0019      	movs	r1, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80021fe:	4b0b      	ldr	r3, [pc, #44]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002200:	430a      	orrs	r2, r1
 8002202:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002208:	2380      	movs	r3, #128	@ 0x80
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	429a      	cmp	r2, r3
 800220e:	d106      	bne.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002210:	4b06      	ldr	r3, [pc, #24]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002212:	68da      	ldr	r2, [r3, #12]
 8002214:	4b05      	ldr	r3, [pc, #20]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002216:	2180      	movs	r1, #128	@ 0x80
 8002218:	0449      	lsls	r1, r1, #17
 800221a:	430a      	orrs	r2, r1
 800221c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800221e:	2312      	movs	r3, #18
 8002220:	18fb      	adds	r3, r7, r3
 8002222:	781b      	ldrb	r3, [r3, #0]
}
 8002224:	0018      	movs	r0, r3
 8002226:	46bd      	mov	sp, r7
 8002228:	b006      	add	sp, #24
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40021000 	.word	0x40021000
 8002230:	efffffff 	.word	0xefffffff
 8002234:	fffff3ff 	.word	0xfffff3ff
 8002238:	fffffcff 	.word	0xfffffcff
 800223c:	fff3ffff 	.word	0xfff3ffff
 8002240:	ffcfffff 	.word	0xffcfffff
 8002244:	ffffcfff 	.word	0xffffcfff
 8002248:	ffff3fff 	.word	0xffff3fff
 800224c:	ffbfffff 	.word	0xffbfffff
 8002250:	feffffff 	.word	0xfeffffff

08002254 <memset>:
 8002254:	0003      	movs	r3, r0
 8002256:	1882      	adds	r2, r0, r2
 8002258:	4293      	cmp	r3, r2
 800225a:	d100      	bne.n	800225e <memset+0xa>
 800225c:	4770      	bx	lr
 800225e:	7019      	strb	r1, [r3, #0]
 8002260:	3301      	adds	r3, #1
 8002262:	e7f9      	b.n	8002258 <memset+0x4>

08002264 <__libc_init_array>:
 8002264:	b570      	push	{r4, r5, r6, lr}
 8002266:	2600      	movs	r6, #0
 8002268:	4c0c      	ldr	r4, [pc, #48]	@ (800229c <__libc_init_array+0x38>)
 800226a:	4d0d      	ldr	r5, [pc, #52]	@ (80022a0 <__libc_init_array+0x3c>)
 800226c:	1b64      	subs	r4, r4, r5
 800226e:	10a4      	asrs	r4, r4, #2
 8002270:	42a6      	cmp	r6, r4
 8002272:	d109      	bne.n	8002288 <__libc_init_array+0x24>
 8002274:	2600      	movs	r6, #0
 8002276:	f000 f819 	bl	80022ac <_init>
 800227a:	4c0a      	ldr	r4, [pc, #40]	@ (80022a4 <__libc_init_array+0x40>)
 800227c:	4d0a      	ldr	r5, [pc, #40]	@ (80022a8 <__libc_init_array+0x44>)
 800227e:	1b64      	subs	r4, r4, r5
 8002280:	10a4      	asrs	r4, r4, #2
 8002282:	42a6      	cmp	r6, r4
 8002284:	d105      	bne.n	8002292 <__libc_init_array+0x2e>
 8002286:	bd70      	pop	{r4, r5, r6, pc}
 8002288:	00b3      	lsls	r3, r6, #2
 800228a:	58eb      	ldr	r3, [r5, r3]
 800228c:	4798      	blx	r3
 800228e:	3601      	adds	r6, #1
 8002290:	e7ee      	b.n	8002270 <__libc_init_array+0xc>
 8002292:	00b3      	lsls	r3, r6, #2
 8002294:	58eb      	ldr	r3, [r5, r3]
 8002296:	4798      	blx	r3
 8002298:	3601      	adds	r6, #1
 800229a:	e7f2      	b.n	8002282 <__libc_init_array+0x1e>
 800229c:	08002304 	.word	0x08002304
 80022a0:	08002304 	.word	0x08002304
 80022a4:	08002308 	.word	0x08002308
 80022a8:	08002304 	.word	0x08002304

080022ac <_init>:
 80022ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ae:	46c0      	nop			@ (mov r8, r8)
 80022b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022b2:	bc08      	pop	{r3}
 80022b4:	469e      	mov	lr, r3
 80022b6:	4770      	bx	lr

080022b8 <_fini>:
 80022b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ba:	46c0      	nop			@ (mov r8, r8)
 80022bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022be:	bc08      	pop	{r3}
 80022c0:	469e      	mov	lr, r3
 80022c2:	4770      	bx	lr
